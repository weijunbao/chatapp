<?xml version="1.0"?>
<doc>
    <assembly>
        <name>coversant.corlib</name>
    </assembly>
    <members>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates a copy of the given zip entry.
            </summary>
            <param name="e">
            The entry to copy.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            </summary>
            <param name="name">Name to clean</param>
            <param name="relativePath">Make names relative if true or absolute if false</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with Windows-XPs built in Zip file handling.
            </summary>
            <param name="name">Name to clean</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.ToString">
            <summary>
            Gets the string representation of this ZipEntry.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see>
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-15: Unused or reserved<br/>
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.RequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions to be stored
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime
            </summary>		
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Name">
            <summary>
            Returns the entry name.  The path components in the entry should
            always separated by slashes ('/').  Dos device names like C: should also
            be removed.  See <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the size is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Size is not in the range 0..0xffffffff
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:Coversant.ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated"/>
            <see cref="F:Coversant.ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 0xffff bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating of the if the entry is a directory.  A directory is determined by
            an entry name with a trailing slash '/'.  The external file attributes
            can also mark a file as a directory.  The trailing slash convention should always be followed
            however.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="T:Coversant.Proxy.Server.ListenEntry">
            <summary>
            Represents an item in a Listeners collection.
            </summary>
        </member>
        <member name="F:Coversant.Proxy.Server.ListenEntry.listener">
            <summary>
            The Listener object.
            </summary>
        </member>
        <member name="F:Coversant.Proxy.Server.ListenEntry.guid">
            <summary>
            The Listener's ID. It must be unique troughout the Listeners collection.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.ListenEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>True if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.ListenEntry.GetHashCode">
            <summary>
            The hash code of this instance.
            </summary>
            <returns>The hash code of this instance.</returns>
        </member>
        <member name="T:Coversant.Proxy.Server.Proxy">
            <summary>
            Defines the class that controls the settings and listener objects.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.Main">
            <summary>
            Entry point of the application.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new Proxy instance.
            </summary>
            <param name="file">The XML configuration file to use.</param>
            <param name="onConsole">Specifies whether or not the proxy is running with a console interface</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.Start">
            <summary>
            Starts a new Proxy server by reading the data from the configuration file and start listening on the specified ports.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.ShowDelListener">
            <summary>
            Asks the user which listener to delete.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.ShowListeners">
            <summary>
            Shows the Listeners list.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.ShowAddListener">
            <summary>
            Asks the user which listener to add.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.ShowHelp">
            <summary>
            Shows a list of commands in the console.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.ShowUpTime">
            <summary>
            Shows the uptime of this proxy server.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.ShowVersion">
            <summary>
            Shows the version number of this proxy server.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.ShowAddUser">
            <summary>
            Asks the user which username to add.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.ShowDelUser">
            <summary>
            Asks the user which username to delete.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.ShowUsers">
            <summary>
            Shows a list of usernames in the console.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.Stop">
            <summary>
            Stops the proxy server.
            </summary>
            <remarks>When this method is called, all listener and client objects will be disposed.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.AddListener(Coversant.Proxy.Server.Listener)">
            <summary>
            Adds a listener to the Listeners list.
            </summary>
            <param name="newItem">The new Listener to add.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Proxy.CreateListener(System.String,System.String)">
            <summary>
            Creates a new Listener obejct from a given listener name and a given listener parameter string.
            </summary>
            <param name="type">The type of object to instantiate.</param>
            <param name="cpars"></param>
            <returns></returns>
        </member>
        <member name="F:Coversant.Proxy.Server.Proxy.m_StartTime">
            <summary>Holds the value of the StartTime property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Proxy.m_Config">
            <summary>Holds the value of the Config property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Proxy.m_Listeners">
            <summary>Holds the value of the Listeners property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Proxy.m_onConsole">
            <summary>Whether or not this proxy is running in a console.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Proxy.Listeners">
            <summary>
            Gets the collection that contains all the Listener objects.
            </summary>
            <value>An ArrayList object that contains all the Listener objects.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Proxy.ListenerCount">
            <summary>
            Gets the number of Listener objects.
            </summary>
            <value>An integer specifying the number of Listener objects.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Proxy.Item(System.Int32)">
            <summary>
            Gets the Listener object at the specified position.
            </summary>
            <value>The Listener instance at position <c>index</c>.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Proxy.StartTime">
            <summary>
            Gets or sets the date when this Proxy server was first started.
            </summary>
            <value>A DateTime structure that indicates when this Proxy server was first started.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Proxy.Config">
            <summary>
            Gets or sets the configuration object for this Proxy server.
            </summary>
            <value>A ProxyConfig instance that represents the configuration object for this Proxy server.</value>
        </member>
        <member name="T:Coversant.Proxy.Server.PortMap.PortMapListener">
            <summary>Listens on a specific port on the proxy server and forwards all incoming data to a specific port on another server.</summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Listener">
            <summary>Specifies the basic methods and properties of a <c>Listener</c> object. This is an abstract class and must be inherited.</summary>
            <remarks>The Listener class provides an abstract base class that represents a listening socket of the proxy server. Descendant classes further specify the protocol that is used between those two connections.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.#ctor(System.Int32,System.Net.IPAddress)">
            <summary>Initializes a new instance of the Listener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="Address">The address to listen on. You can specify IPAddress.Any to listen on all installed network cards.</param>
            <remarks>For the security of your server, try to avoid to listen on every network card (IPAddress.Any). Listening on a local IP address is usually sufficient and much more secure.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.Start">
            <summary>Starts listening on the selected IP address and port.</summary>
            <exception cref="T:System.Net.Sockets.SocketException">There was an error while creating the listening socket.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.Restart">
            <summary>Restarts listening on the selected IP address and port.</summary>
            <remarks>This method is automatically called when the listening port or the listening IP address are changed.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">There was an error while creating the listening socket.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.AddClient(Coversant.Proxy.Server.Client)">
            <summary>Adds the specified Client to the client list.</summary>
            <remarks>A client will never be added twice to the list.</remarks>
            <param name="client">The client to add to the client list.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.RemoveClient(Coversant.Proxy.Server.Client)">
            <summary>Removes the specified Client from the client list.</summary>
            <param name="client">The client to remove from the client list.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.GetClientCount">
            <summary>Returns the number of clients in the client list.</summary>
            <returns>The number of connected clients.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.GetClientAt(System.Int32)">
            <summary>Returns the requested client from the client list.</summary>
            <param name="Index">The index of the requested client.</param>
            <returns>The requested client.</returns>
            <remarks>If the specified index is invalid, the GetClientAt method returns null.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.Dispose">
            <summary>Disposes of the resources (other than memory) used by the Listener.</summary>
            <remarks>Stops listening and disposes <em>all</em> the client objects. Once disposed, this object should not be used anymore.</remarks>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.GetLocalExternalIP">
            <summary>Returns an external IP address of this computer, if present.</summary>
            <returns>Returns an external IP address of this computer; if this computer does not have an external IP address, it returns the first local IP address it can find.</returns>
            <remarks>If this computer does not have any configured IP address, this method returns the IP address 0.0.0.0.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.IsRemoteIP(System.Net.IPAddress)">
            <summary>Checks whether the specified IP address is a remote IP address or not.</summary>
            <param name="IP">The IP address to check.</param>
            <returns>True if the specified IP address is a remote address, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.IsLocalIP(System.Net.IPAddress)">
            <summary>Checks whether the specified IP address is a local IP address or not.</summary>
            <param name="IP">The IP address to check.</param>
            <returns>True if the specified IP address is a local address, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.GetLocalInternalIP">
            <summary>Returns an internal IP address of this computer, if present.</summary>
            <returns>Returns an internal IP address of this computer; if this computer does not have an internal IP address, it returns the first local IP address it can find.</returns>
            <remarks>If this computer does not have any configured IP address, this method returns the IP address 0.0.0.0.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.OnAccept(System.IAsyncResult)">
            <summary>Called when there's an incoming client connection waiting to be accepted.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Listener.ToString">
            <summary>Returns a string representation of this object.</summary>
            <returns>A string with information about this object.</returns>
        </member>
        <member name="F:Coversant.Proxy.Server.Listener.m_Port">
            <summary>Holds the value of the Port property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Listener.m_Address">
            <summary>Holds the value of the Address property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Listener.m_ListenSocket">
            <summary>Holds the value of the ListenSocket property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Listener.m_Clients">
            <summary>Holds the value of the Clients property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Listener.m_IsDisposed">
            <summary>Holds the value of the IsDisposed property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Listener.Port">
            <summary>Gets or sets the port number on which to listen on.</summary>
            <value>An integer defining the port number to listen on.</value>
            <seealso cref="P:Coversant.Proxy.Server.Listener.Address"/>
            <exception cref="T:System.ArgumentException">The specified value is less than or equal to zero.</exception>
        </member>
        <member name="P:Coversant.Proxy.Server.Listener.Address">
            <summary>Gets or sets the address on which to listen on.</summary>
            <value>An IPAddress instance defining the IP address to listen on.</value>
            <seealso cref="P:Coversant.Proxy.Server.Listener.Port"/>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Server.Listener.ListenSocket">
            <summary>Gets or sets the listening Socket.</summary>
            <value>An instance of the Socket class that's used to listen for incoming connections.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Server.Listener.Clients">
            <summary>Gets the list of connected clients.</summary>
            <value>An instance of the ArrayList class that's used to store all the connections.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Listener.IsDisposed">
            <summary>Gets a value indicating whether the Listener has been disposed or not.</summary>
            <value>An boolean that specifies whether the object has been disposed or not.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Listener.Listening">
            <summary>Gets a value indicating whether the Listener is currently listening or not.</summary>
            <value>A boolean that indicates whether the Listener is currently listening or not.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Listener.ConstructString">
            <summary>Returns a string that holds all the construction information for this object.</summary>
            <value>A string that holds all the construction information for this object.</value>
        </member>
        <member name="M:Coversant.Proxy.Server.PortMap.PortMapListener.#ctor(System.Int32,System.Net.IPEndPoint)">
            <summary>Initializes a new instance of the PortMapListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="MapToIP">The address to forward to.</param>
            <remarks>The object will listen on all network addresses on the computer.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="Port">Port</paramref> is not positive.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="MapToIP">MapToIP</paramref> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.PortMap.PortMapListener.#ctor(System.Net.IPAddress,System.Int32,System.Net.IPEndPoint)">
            <summary>Initializes a new instance of the PortMapListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="Address">The network address to listen on.</param>
            <param name="MapToIP">The address to forward to.</param>
            <remarks>For security reasons, <paramref name="Address">Address</paramref> should not be IPAddress.Any.</remarks>
            <exception cref="T:System.ArgumentNullException">Address or <paramref name="MapToIP">MapToIP</paramref> is null.</exception>
            <exception cref="T:System.ArgumentException">Port is not positive.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.PortMap.PortMapListener.#ctor(System.Net.IPAddress,System.Int32,System.Net.IPAddress,System.Int32)">
            <summary>Initializes a new instance of the PortMapListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="Address">The network address to listen on.</param>
            <param name="MapToPort">The port to forward to.</param>
            <param name="MapToAddress">The IP address to forward to.</param>
            <remarks>For security reasons, Address should not be IPAddress.Any.</remarks>
            <exception cref="T:System.ArgumentNullException">Address or MapToAddress is null.</exception>
            <exception cref="T:System.ArgumentException">Port or MapToPort is invalid.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.PortMap.PortMapListener.OnAccept(System.IAsyncResult)">
            <summary>Called when there's an incoming client connection waiting to be accepted.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.PortMap.PortMapListener.ToString">
            <summary>Returns a string representation of this object.</summary>
            <returns>A string with information about this object.</returns>
        </member>
        <member name="F:Coversant.Proxy.Server.PortMap.PortMapListener.m_MapTo">
            <summary>Holds the value of the MapTo property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.PortMap.PortMapListener.MapTo">
            <summary>Gets or sets the IP EndPoint to map all incoming traffic to.</summary>
            <value>An IPEndPoint that holds the IP address and port to use when redirecting incoming traffic.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
            <returns>An IP EndPoint specifying the host and port to map all incoming traffic to.</returns>
        </member>
        <member name="P:Coversant.Proxy.Server.PortMap.PortMapListener.ConstructString">
            <summary>Returns a string that holds all the construction information for this object.</summary>
            <value>A string that holds all the construction information for this object.</value>
        </member>
        <member name="T:Coversant.PerformanceCounters.Timeval">
            <summary>
            Unix Timeval struct.  Used by gettimeofday(2).
            </summary>
        </member>
        <member name="T:Coversant.Net.Security.SupportedSecureProtocol">
            <summary>
            The secure protocols supported by the SDK.
            </summary>
            <remarks>
            Various versions of SSL are supported by the SDK.  
            Only certain versions of the SDK (i.e. Desktop Edition vs. Mobile Edition) support the listed protocols.
            </remarks>
        </member>
        <member name="M:Coversant.Gui.Console.Widget.Draw">
            <summary>
            This should be overridden in derivied classes, 
            if the base.Draw is called it will clear the widget.
            </summary>
        </member>
        <member name="M:Coversant.Chart.Analyzer.GraphRenderer.BeginUpdate">
            <summary>
            Begin updating data.
            </summary>
        </member>
        <member name="M:Coversant.Chart.Analyzer.GraphRenderer.EndUpdate">
            <summary>
            End updating data.
            </summary>
        </member>
        <member name="F:Coversant.Chart.Analyzer.ChartControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Coversant.Chart.Analyzer.ChartControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Coversant.Chart.Analyzer.ChartControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.comprFunc">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buf">The buffer containing input data.</param>
            <param name="off">The index of the first byte of data.</param>
            <param name="len">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed via <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> SetInput</see>
            </summary>		
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.TarException">
            <summary>
            TarExceptions are used for exceptions specific to tar classes and code.	
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified error message.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message string</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarException.#ctor">
            <summary>
            Initialises a new instance of the TarException class.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the TarException class with a specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Exception">
            <summary>
            BZip2Exception represents exceptions specific to Bzip2 algorithm
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor">
            <summary>
            Initialise a new instance of BZip2Exception.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor(System.String)">
            <summary>
            Initialise a new instance of BZip2Exception with its message set to message.
            </summary>
            <param name="message">The message describing the error.</param>
        </member>
        <member name="T:Coversant.PerformanceCounters.PerformanceCounterWriter">
            <summary>
            Abstract Performance Counter Writer Class
            </summary>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.OnSampleCreated(Coversant.PerformanceCounters.CounterSample)">
            <summary>
            Notifys the PerformanceCounterManager that the sample has been created.
            </summary>
            <param name="sample">CounterSample</param>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.#ctor">
            <summary>
            Custom performance counter
            </summary>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.#ctor(System.String,System.String)">
            <summary>
            Custom performance counter.  Sets instanceName to string.Empty and machineName to "."
            </summary>
            <param name="categoryName">Category name, cannot be null or empty.</param>
            <param name="counterName">Counter name, cannot be null or empty.</param>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if categoryName or counterName is string.Empty.</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException if categoryName or counterNae is null.</exception>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Custom performance counter.  Sets instanceName to string.Empty and machineName to "."
            </summary>
            <param name="categoryName">Category name, cannot be null or empty.</param>
            <param name="counterName">Counter name, cannot be null or empty.</param>
            <param name="readOnly">Is the counter read only.</param>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if categoryName or counterName is string.Empty.</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException if categoryName or counterNae is null.</exception>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.#ctor(System.String,System.String,System.String)">
            <summary>
            Custom performance counter.  Sets machineName to "."
            </summary>
            <param name="categoryName">Category name, cannot be null or empty.</param>
            <param name="counterName">Counter name, cannot be null or empty.</param>
            <param name="instanceName">Instnace name</param>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if categoryName or counterName is string.Empty.</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException if categoryName or counterNae is null.</exception>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Custom performance counter.  
            </summary>
            <param name="categoryName">Category name, cannot be null or empty.</param>
            <param name="counterName">Counter name, cannot be null or empty.</param>
            <param name="instanceName">Instance name.</param>
            <param name="readOnly">Read only counter.</param>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if categoryName or counterName is string.Empty.</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException if categoryName or counterNae is null.</exception>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Custom performance counter.
            </summary>
            <param name="categoryName">Category name, cannot be null or empty.</param>
            <param name="counterName">Counter name, cannot be null or empty.</param>
            <param name="instanceName">Instance name.</param>
            <param name="machineName">Machine name.</param>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if categoryName or counterName is string.Empty.</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException if categoryName or counterNae is null.</exception>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.#ctor(System.Diagnostics.CounterCreationData)">
            <summary>
            Internal performance counter constructor
            </summary>
            <param name="counterCreationData">Counter Creation Data</param>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.Close">
            <summary>
            Close the performance counter.
            </summary>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.Increment">
            <summary>
            Increments the counter
            </summary>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.IncrementBy(System.Int64)">
            <summary>
            Increments the counter by a specific value.
            </summary>
            <param name="value">Value to increment the counter.</param>
            <returns>The incremented value of the counter.</returns>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.Decrement">
            <summary>
            Decrement the counter
            </summary>
            <returns>New value</returns>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.NextSample(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns a new CounterSample with a current timestamp.
            </summary>
            <param name="rawValue">Value of the counter.</param>
            <param name="baseValue">BaseValue of the counter</param>
            <param name="counterFrequency">Frequency of the counter</param>
            <returns>Created CounterSample.</returns>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.NextSample">
            <summary>
            Records and returns a new CounterSample with the current value of the counter and a current timestamp.
            </summary>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.RemoveInstance">
            <summary>
            Removes the instance from all listening PerformanceCounterManagers.
            </summary>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.OnBeginInit">
            <summary>
            Overridden in derived classes for initalization code.
            </summary>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounter.OnEndInit">
            <summary>
            Overridden in derived classes for initalization code.
            </summary>
        </member>
        <member name="E:Coversant.PerformanceCounters.PerformanceCounter.SampleCreated">
            <summary>
            A CounterSample has been created.
            </summary>
        </member>
        <member name="M:Coversant.PerformanceCounters.CpuPerformanceCounter.CreateCpuPerformanceCounters(System.Int64)">
            <summary>
            Initializes all CpuPerformanceCounters.
            </summary>
            <param name="counterFrequency"></param>
            <returns></returns>
        </member>
        <member name="M:Coversant.PerformanceCounters.CounterSample.#ctor">
            <summary>
            Protected Counter Sample Constructor
            </summary>
        </member>
        <member name="M:Coversant.PerformanceCounters.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Performance Counter Sample
            </summary>
            <param name="rawValue">Raw Value</param>
            <param name="baseValue">Base Value</param>
            <param name="counterFrequency">Counter Frequency</param>
            <param name="seconds">Timestamp Seconds</param>
            <param name="microSeconds">Timestamp MicroSeconds</param>
        </member>
        <member name="M:Coversant.PerformanceCounters.CounterSample.#ctor(Coversant.PerformanceCounters.PerformanceCounter,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Performance Counter Sample
            </summary>
            <param name="rawValue">Raw Value</param>
            <param name="baseValue">Base Value</param>
            <param name="counterFrequency">Counter Frequency</param>
            <param name="seconds">Timestamp Seconds</param>
            <param name="microSeconds">Timestamp MicroSeconds</param>
        </member>
        <member name="M:Coversant.PerformanceCounters.CounterSample.#ctor(Coversant.PerformanceCounters.PerformanceCounter,System.Int64,System.Int64,System.Int64,Coversant.PerformanceCounters.Timeval)">
            <summary>
            
            </summary>
            <param name="rawValue">Raw Value</param>
            <param name="baseValue">Base Value</param>
            <param name="counterFrequency">Counter Frequency</param>
            <param name="timeval">Timestamp, gettimeofday Timeval structure.</param>
        </member>
        <member name="F:Coversant.Chart.Axis.None">
            <summary>
            Not a value.
            </summary>
        </member>
        <member name="F:Coversant.Chart.Axis.X">
            <summary>
            X Axis
            </summary>
        </member>
        <member name="F:Coversant.Chart.Axis.Y">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="F:Coversant.Chart.Axis.Z">
            <summary>
            Series Grouping
            </summary>
        </member>
        <member name="F:Coversant.Chart.Axis.Group">
            <summary>
            Category Grouping
            </summary>
        </member>
        <member name="F:Coversant.Chart.Analyzer.Chart.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Coversant.Chart.Analyzer.Chart.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Coversant.Chart.Analyzer.Chart.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Coversant.Chart.Analyzer.Chart.BeginUpdate">
            <summary>
            Begin updating data.
            </summary>
        </member>
        <member name="M:Coversant.Chart.Analyzer.Chart.EndUpdate">
            <summary>
            End updating data.
            </summary>
        </member>
        <member name="M:Coversant.Chart.Analyzer.Chart.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.FileName">
            <summary>
            Get the name of the file for which keys are required.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.Key">
            <summary>
            Get/set the key value
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            This class is thread safe:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using Coversant.ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		ZipFile zFile = new ZipFile(args[0]);
            		Console.WriteLine("Listing of : " + zFile.Name);
            		Console.WriteLine("");
            		Console.WriteLine("Raw Size    Size      Date     Time     Name");
            		Console.WriteLine("--------  --------  --------  ------  ---------");
            		foreach (ZipEntry e in zFile) {
            			DateTime d = e.DateTime;
            			Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            			                                                    d.ToString("dd-MM-yy"), d.ToString("t"),
            			                                                    e.Name);
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryptino keys are required.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given FileStream
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given Stream
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.<br/>
            The stream provided cannot seek
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries
            array.  This is called exactly once by the constructors.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator for the Zip entries in this Zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            The zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true iff the test passes, false otherwise</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.TestLocalHeader(Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry,System.Boolean,System.Boolean)">
            <summary>
            Test the local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="fullTest">
            If true be extremely picky about the testing, otherwise be relaxed
            </param>
            <param name="extractTest">
            Apply extra testing to see if the entry can be extracted by the library
            </param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.CheckLocalHeader(Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Checks, if the local header of the entry at index i matches the
            central directory, and returns the offset to the data.
            </summary>
            <returns>
            The start offset of the (compressed) data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.GetOutputStream(Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Gets an output stream for the specified <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an outputstream for.</param>
            <param name="fileName"></param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates an input stream reading the given zip entry as
            uncompressed data.  Normally zip entry should be an entry
            returned by GetEntry().
            </summary>
            <returns>
            the input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(System.Int32)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
            <returns>
            An input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.Key">
            <summary>
            Get/set the encryption key value.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="T:Coversant.ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses data into the byte array
            </summary>
            <param name="b">
            The array to read and decompress data into
            </param>
            <param name="off">
            The offset indicating where the data should be placed
            </param>
            <param name="len">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="n">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is zero or less
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Close">
            <summary>
            Close this partial input stream.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buf">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.def">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="defl">
            the underlying deflater.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufsize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling flush() on the deflater and then
            on the underlying stream.  This ensures that all bytes are
            flushed.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls finish() and closes the underlying
            stream when <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="bval">
            The byte value.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buf">
            The byte array
            </param>
            <param name="off">
            The offset into the byte array where to start.
            </param>
            <param name="len">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptByte">
            <summary>
            Encrypt a single byte 
            </summary>
            <returns>
            The encrypted value
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            The current position within the stream.
            Always throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.  When null no encryption is performed
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler">
            <summary>
            Used to advise clients of 'events' while processing archives
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive">
            <summary>
            The TarArchive class implements the concept of a
            'Tape Archive'. A tar archive is a series of entries, each of
            which represents a file system object. Each entry in
            the archive consists of a header block followed by 0 or more data blocks.
            Directory entries consist only of the header block, and are followed by entries
            for the directory's contents. File entries consist of a
            header followed by the number of blocks needed to
            contain the file's contents. All entries are written on
            block boundaries. Blocks are 512 bytes long.
            
            TarArchives are instantiated in either read or write mode,
            based upon whether they are instantiated with an InputStream
            or an OutputStream. Once instantiated TarArchives read/write
            mode can not be changed.
            
            There is currently no support for random access to tar archives.
            However, it seems that subclassing TarArchive, and using the
            TarBuffer.getCurrentRecordNum() and TarBuffer.getCurrentBlockNum()
            methods, this would be rather trvial.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.OnProgressMessageEvent(Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry,System.String)">
            <summary>
            Raises the ProgressMessage event
            </summary>
            <param name="entry">TarEntry for this event</param>
            <param name="message">message for this event.  Null is no message</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor">
            <summary>
            Constructor for a TarArchive.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream)">
            <summary>
            The InputStream based constructors create a TarArchive for the
            purposes of extracting or listing a tar archive. Thus, use
            these constructors when you wish to extract files from or list
            the contents of an existing tar archive.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create TarArchive for reading setting block factor
            </summary>
            <param name="inputStream">Stream for tar archive contents</param>
            <param name="blockFactor">The blocking factor to apply</param>
            <returns>
            TarArchive
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream)">
            <summary>
            Create a TarArchive for writing to, using the default blocking factor
            </summary>
            <param name="outputStream">Stream to write to</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create a TarArchive for writing to
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="blockFactor">The blocking factor to use for buffering.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.Initialize(System.Int32)">
            <summary>
            Common constructor initialization code.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.SetKeepOldFiles(System.Boolean)">
            <summary>
            Set the flag that determines whether existing files are
            kept, or overwritten during extraction.
            </summary>
            <param name="keepOldFiles">
            If true, do not overwrite existing files.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.SetAsciiTranslation(System.Boolean)">
            <summary>
            Set the ascii file translation flag. If ascii file translation
            is true, then the file is checked to see if it a binary file or not. 
            If the flag is true and the test indicates it is ascii text 
            file, it will be translated. The translation converts the local
            operating system's concept of line ends into the UNIX line end,
            '\n', which is the defacto standard for a TAR archive. This makes
            text files compatible with UNIX.
            </summary>
            <param name= "asciiTranslate">
            If true, translate ascii text files.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set user and group information that will be used to fill in the
            tar archive's entry headers. This information based on that available 
            for the linux operating system, which is not always available on other
            operating systems.  TarArchive allows the programmer to specify values
            to be used in their place.
            </summary>
            <param name="userId">
            The user id to use in the headers.
            </param>
            <param name="userName">
            The user name to use in the headers.
            </param>
            <param name="groupId">
            The group id to use in the headers.
            </param>
            <param name="groupName">
            The group name to use in the headers.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.CloseArchive">
            <summary>
            Close the archive. This simply calls the underlying
            tar stream's close() method.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ListContents">
            <summary>
            Perform the "list" command for the archive contents.
            
            NOTE That this method uses the <see cref="E:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent"> progress event</see> to actually list
            the contents. If the progress display event is not set, nothing will be listed!
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractContents(System.String)">
            <summary>
            Perform the "extract" command and extract the contents of the archive.
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractEntry(System.String,Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Extract an entry from the archive. This method assumes that the
            tarIn stream has been properly set with a call to getNextEntry().
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
            <param name="entry">
            The TarEntry returned by tarIn.getNextEntry().
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.WriteEntry(Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.InternalWriteEntry(Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="E:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent">
            <summary>
            Client hook allowing detailed information to be reported during processing
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.PathPrefix">
            <summary>
            PathPrefix is added to entry names as they are written if the value is not null.
            A slash character is appended after PathPrefix 
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.RootPath">
            <summary>
            RootPath is removed from entry names if it is found at the
            beginning of the name.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">
            <summary>
            Get or set a value indicating if overrides defined by <see cref="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">SetUserInfo</see> should be applied.
            </summary>
            <remarks>If overrides are not applied then the values as set in each header will be used.</remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.UserId">
            <summary>
            Get the archive user id.
            See <see cref="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user id.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.UserName">
            <summary>
            Get the archive user name.
            See <see cref="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user name.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.GroupId">
            <summary>
            Get the archive group id.
            See <see cref="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group id.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.GroupName">
            <summary>
            Get the archive group name.
            See <see cref="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group name.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarArchive.RecordSize">
            <summary>
            Get the archive's record size. Because of its history, tar
            supports the concept of buffered IO consisting of RECORDS of
            BLOCKS. This allowed tar to match the IO characteristics of
            the physical device being used. Of course, in the C# world,
            this makes no sense, WITH ONE EXCEPTION - archives are expected
            to be properly "blocked". Thus, all of the horrible TarBuffer
            support boils down to simply getting the "boundaries" correct.
            </summary>
            <returns>
            The record size this archive is using.
            </returns>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter">
            <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex"></see> regular expressions separated by semi-colons ';'
            Each expression can be prefixed by a plus '+' sign or a minus '-' sign to denote the expression
            is intended to include or exclude names.  If neither a plus or minus sign is found include is the default
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter.#ctor(System.String)">
            <summary>
            Construct an instance based on the filter expression passed
            </summary>
            <param name="filter">The filter expression.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter.IsValidExpression(System.String)">
            <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
            <param name="e">The expression to test.</param>
            <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex"/> false otherwise.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter.IsValidFilterExpression(System.String)">
            <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
            <param name="toTest">The filter expression to test.</param>
            <returns>True if the expression is valid, false otherwise.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter.ToString">
            <summary>
            Convert this filter to its string equivalent.
            </summary>
            <returns>The string equivalent for this filter.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter.IsIncluded(System.String)">
            <summary>
            Test a value to see if it is included by the filter.
            </summary>
            <param name="testValue">The value to test.</param>
            <returns>True if the value is included, false otherwise.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter.IsExcluded(System.String)">
            <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
            <param name="testValue">The value to test.</param>
            <returns>True if the value is excluded, false otherwise.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter.IsMatch(System.String)">
            <summary>
            Test a value to see if it matches the filter.
            </summary>
            <param name="testValue">The value to test.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter.Compile">
            <summary>
            Compile this filter.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.ScanEventArgs">
            <summary>
            Event arguments for scanning.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.ScanEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.ScanEventArgs"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Core.ScanEventArgs.Name">
            <summary>
            The name for this event.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Core.ScanEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.DirectoryEventArgs">
            <summary>
            Event arguments for directories.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.DirectoryEventArgs"></see>.
            </summary>
            <param name="name">The name for this directory.</param>
            <param name="hasMatchingFiles">Flag value indicating if any matching files are contained in this directory.</param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.HasMatchingFiles">
            <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs">
            <summary>
            Arguments passed when scan failures are detected.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs"></see>
            </summary>
            <param name="name">The name to apply.</param>
            <param name="e">The exception to use.</param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Name">
            <summary>
            The applicable name.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Exception">
            <summary>
            The applicable exception.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.ContinueRunning">
            <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.ProcessDirectoryDelegate">
            <summary>
            Delegate invokked when a directory is processed.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.ProcessFileDelegate">
            <summary>
            Delegate invoked when a file is processed.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.DirectoryFailureDelegate">
            <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.FileFailureDelegate">
            <summary>
            Delegate invoked when a file failure is detected.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner">
            <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="filter">The file filter to apply when scanning.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter"></see>filter to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter"></see>filter to apply.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(Coversant.ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter"></see>filter to apply.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(Coversant.ICSharpCode.SharpZipLib.Core.IScanFilter,Coversant.ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.IScanFilter"></see>filter to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.IScanFilter"></see>filter to apply.</param>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessDirectory">
            <summary>
            Delegate to invoke when a directory is processed.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessFile">
            <summary>
            Delegate to invoke when a file is processed.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.DirectoryFailure">
            <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.FileFailure">
            <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the DirectoryFailure event.
            </summary>
            <param name="directory">Rhe directory name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raise the FileFailure event.
            </summary>
            <param name="file">The file name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessFile(System.String)">
            <summary>
            Raise the ProcessFile event.
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raise the ProcessDirectory event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.Scan(System.String,System.Boolean)">
            <summary>
            Scan a directory.
            </summary>
            <param name="directory">The base directory to scan.</param>
            <param name="recurse">True to recurse subdirectories, false to do a single directory.</param>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.fileFilter">
            <summary>
            The file filter currently in use.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.directoryFilter">
            <summary>
            The directory filter currently in use.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Core.FileSystemScanner.alive">
            <summary>
            Falg indicating if scanning is still alive.  Used to cancel a scan.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.buf">
            <summary>Internal work buffer
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufsize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            write a byte to buffer
            </summary>
            <param name="b">
            value to write
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="s">
            value to write
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="len">number of bytes to write</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            the output array;
            </param>
            <param name="offset">
            the offset into output array;
            </param>
            <param name="length">		
            length the maximum number of bytes to store;
            </param>
            <exception name="ArgumentOutOfRangeException">
            IndexOutOfBoundsException if offset or length are invalid.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            converted buffer contents contents
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code>
            using System;
            using System.IO;
            
            using Coversant.ICSharpCode.SharpZipLib.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		Stream s = new GZipInputStream(File.OpenRead(args[0]));
            		FileStream fs = File.Create(Path.GetFileNameWithoutExtension(args[0]));
            		int size = 2048;
            		byte[] writeData = new byte[2048];
            		while (true) {
            			size = s.Read(writeData, 0, size);
            			if (size > 0) {
            				fs.Write(writeData, 0, size);
            			} else {
            				break;
            			}
            		}
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.GZip.GZipInputStream.eos">
            <summary>
            Indicates end of stream
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buf">
            The buffer to read uncompressed data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="len">
            The number of uncompressed bytes to be read
            </param>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants">
            <summary>
            Defines internal values for both compression and decompression
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.rNums">
            <summary>
            Random numbers used to randomise repetitive blocks
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.baseBlockSize">
            <summary>
            When multiplied by compression parameter (1-9) gives the block size for compression
            9 gives the best compresssion but uses the most memory.
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_ALPHA_SIZE">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_CODE_LEN">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RUNA">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RUNB">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.N_GROUPS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.G_SIZE">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.N_ITERS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_SELECTORS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2Constants.NUM_OVERSHOOT_BYTES">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream">
            <summary>
            The TarOutputStream writes a UNIX tar archive as an OutputStream.
            Methods are provided to put entries, and then write their contents
            by writing to this stream using write().
            </summary>
            public
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.debug">
            <summary>
            flag indicating debugging code should be activated or not
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.currSize">
            <summary>
            Size for the current entry
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.currBytes">
            <summary>
            bytes written for this entry so far
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.blockBuf">
            <summary>
            single block working buffer 
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemLen">
            <summary>
            current 'Assembly' buffer length
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemBuf">
            <summary>
            'Assembly' buffer used to assmble data before writing
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.buffer">
            <summary>
            TarBuffer used to provide correct blocking factor
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.outputStream">
            <summary>
            the destination stream for the archive contents
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            set the position within the current stream
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.SetLength(System.Int64)">
            <summary>
            set the length of the current stream
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.ReadByte">
            <summary>
            Read a byte from the stream and advance the position within the stream 
            by one byte or returns -1 if at the end of the stream.
            </summary>
            <returns>The byte value or -1 if at end of stream</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read bytes from the current stream and advance the position within the 
            stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read, or zero if at the end of the stream</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.Flush">
            <summary>
            All buffered data is written to destination
            </summary>		
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct TarOutputStream using default block factor
            </summary>
            <param name="outputStream">stream to write to</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarOutputStream with user specified block factor
            </summary>
            <param name="outputStream">stream to write to</param>
            <param name="blockFactor">blocking factor</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.Finish">
            <summary>
            Ends the TAR archive without closing the underlying OutputStream.
            The result is that the EOF record of nulls is written.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.Close">
            <summary>
            Ends the TAR archive and closes the underlying OutputStream.
            This means that finish() is called followed by calling the
            TarBuffer's close().
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            The TarBuffer record size.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.PutNextEntry(Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Put an entry on the output stream. This writes the entry's
            header and positions the output stream for writing
            the contents of the entry. Once this method is called, the
            stream is ready for calls to write() to write the entry's
            contents. Once the contents are written, closeEntry()
            <B>MUST</B> be called to ensure that all buffered data
            is completely written to the output stream.
            </summary>
            <param name="entry">
            The TarEntry to be written to the archive.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.CloseEntry">
            <summary>
            Close an entry. This method MUST be called for all file
            entries that contain data. The reason is that we must
            buffer data written to the stream in order to satisfy
            the buffer's block based writes. Thus, there may be
            data fragments still being assembled that must be written
            to the output stream before this entry is closed and the
            next entry written.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current tar archive entry.
            This method simply calls Write(byte[], int, int).
            </summary>
            <param name="b">
            The byte to be written.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the current tar archive entry. This method
            is aware of the current entry and will throw an exception if
            you attempt to write bytes past the length specified for the
            current entry. The method is also (painfully) aware of the
            record buffering required by TarBuffer, and manages buffers
            that are not a multiple of recordsize in length, including
            assembling records from small buffers.
            </summary>
            <param name = "wBuf">
            The buffer to write to the archive.
            </param>
            <param name = "wOffset">
            The offset in the buffer from which to get bytes.
            </param>
            <param name = "numToWrite">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteEOFRecord">
            <summary>
            Write an EOF (end of archive) record to the tar archive.
            An EOF record consists of a record of all zeros.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanRead">
            <summary>
            true if the stream supports reading; otherwise, false.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanSeek">
            <summary>
            true if the stream supports seeking; otherwise, false.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanWrite">
            <summary>
            true if stream supports writing; otherwise, false.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.Length">
            <summary>
            length of stream in bytes
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarOutputStream.Position">
            <summary>
            gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.InvalidHeaderException">
            <summary>
            This exception is used to indicate that there is a problem
            with a TAR archive header.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor">
            <summary>
            Initialise a new instance of the InvalidHeaderException class.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the InvalidHeaderException class with a specified message.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.GZip.GZipOutputStream">
             <summary>
             This filter stream is used to compress a stream into a "GZIP" stream.
             The "GZIP" format is described in RFC 1952.
            
             author of the original java version : John Leuner
             </summary>
             <example> This sample shows how to gzip a file
             <code>
             using System;
             using System.IO;
             
             using Coversant.ICSharpCode.SharpZipLib.GZip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		Stream s = new GZipOutputStream(File.Create(args[0] + ".gz"));
             		FileStream fs = File.OpenRead(args[0]);
             		byte[] writeData = new byte[fs.Length];
             		fs.Read(writeData, 0, (int)fs.Length);
             		s.Write(writeData, 0, writeData.Length);
             		s.Close();
             	}
             }	
             </code>
             </example>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZipOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write given buffer to output updating crc
            </summary>
            <param name="buf">Buffer to write</param>
            <param name="off">Offset of first byte in buf to write</param>
            <param name="len">Number of bytes to write</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the active compression level (1-9).  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipOutputStream.GetLevel">
            <summary>
            Get the current compression level.
            </summary>
            <returns>The current compression level.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Finish">
            <summary>
            Finish compression and write any footer information required to stream
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.GZip.GZipException">
            <summary>
            GZipException represents a Gzip specific exception	
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipException.#ctor">
            <summary>
            Initialise a new instance of GZipException
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.String)">
            <summary>
            Initialise a new instance of GZipException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"></see>string that describes the error.</param>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream">
            <summary>
            An input stream that decompresses files in the BZip2 format 
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            This operation is not supported and will throw a NotSupportedExceptionortedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a sequence of bytes and advances the read position by one byte.
            </summary>
            <param name="b">Array of bytes to store values in</param>
            <param name="offset">Offset in array to begin storing data</param>
            <param name="count">The maximum number of bytes to read</param>
            <returns>The total number of bytes read into the buffer. This might be less
            than the number of bytes requested if that number of bytes are not 
            currently available or zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Close">
            <summary>
            Closes the stream, releasing any associated resources.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct instance for reading from stream
            </summary>
            <param name="stream">Data source</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position
            </summary>
            <returns>byte read or -1 on end of stream</returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value indicating if the stream supports reading
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            This property always returns false
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Position">
            <summary>
            Gets or sets the streams position.
            Setting the position is not supported and will throw a NotSupportException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set the position</exception>
        </member>
        <member name="T:Coversant.Proxy.Server.DestroyDelegate">
            <summary>References the callback method to be called when the <c>Client</c> object disconnects from the local client and the remote server.</summary>
            <param name="client">The <c>Client</c> that has closed its connections.</param>
        </member>
        <member name="T:Coversant.Proxy.Server.Client">
            <summary>Specifies the basic methods and properties of a <c>Client</c> object. This is an abstract class and must be inherited.</summary>
            <remarks>The Client class provides an abstract base class that represents a connection to a local client and a remote server. Descendant classes further specify the protocol that is used between those two connections.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.DestroyDelegate)">
            <summary>Initializes a new instance of the Client class.</summary>
            <param name="ClientSocket">The <see cref="T:System.Net.Sockets.Socket">Socket</see> connection between this proxy server and the local client.</param>
            <param name="Destroyer">The callback method to be called when this Client object disconnects from the local client and the remote server.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.DestroyDelegate,System.Byte[],System.Byte[])">
            <summary>Initializes a new instance of the Client class.</summary>
            <param name="ClientSocket">The <see cref="T:System.Net.Sockets.Socket">Socket</see> connection between this proxy server and the local client.</param>
            <param name="Destroyer">The callback method to be called when this Client object disconnects from the local client and the remote server.</param>
            <param name="buffer">The buffer to use for receiving data from the client.</param>
            <param name="remoteBuffer">The buffer to use for receiving data from the remote endpoint.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.#ctor">
            <summary>Initializes a new instance of the Client object.</summary>
            <remarks>Both the ClientSocket property and the DestroyDelegate are initialized to null.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.Dispose">
            <summary>Disposes of the resources (other than memory) used by the Client.</summary>
            <remarks>Closes the connections with the local client and the remote host. Once <c>Dispose</c> has been called, this object should not be used anymore.</remarks>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.ToString">
            <summary>Returns text information about this Client object.</summary>
            <returns>A string representing this Client object.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.StartRelay">
            <summary>Starts relaying data between the remote host and the local client.</summary>
            <remarks>This method should only be called after all protocol specific communication has been finished.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.OnClientReceive(System.IAsyncResult)">
            <summary>Called when we have received data from the local client.<br>Incoming data will immediately be forwarded to the remote host.</br></summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.OnRemoteSent(System.IAsyncResult)">
            <summary>Called when we have sent data to the remote host.<br>When all the data has been sent, we will start receiving again from the local client.</br></summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.OnRemoteReceive(System.IAsyncResult)">
            <summary>Called when we have received data from the remote host.<br>Incoming data will immediately be forwarded to the local client.</br></summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.OnClientSent(System.IAsyncResult)">
            <summary>Called when we have sent data to the local client.<br>When all the data has been sent, we will start receiving again from the remote host.</br></summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Client.StartHandshake">
            <summary>Starts communication with the local client.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Client.Destroyer">
            <summary>Holds the address of the method to call when this client is ready to be destroyed.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Client.m_ClientSocket">
            <summary>Holds the value of the ClientSocket property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Client.m_DestinationSocket">
            <summary>Holds the value of the DestinationSocket property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Client.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Client.m_RemoteBuffer">
            <summary>Holds the value of the RemoteBuffer property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Client.ClientSocket">
            <summary>Gets or sets the Socket connection between the proxy server and the local client.</summary>
            <value>A Socket instance defining the connection between the proxy server and the local client.</value>
            <seealso cref="P:Coversant.Proxy.Server.Client.DestinationSocket"/>
        </member>
        <member name="P:Coversant.Proxy.Server.Client.DestinationSocket">
            <summary>Gets or sets the Socket connection between the proxy server and the remote host.</summary>
            <value>A Socket instance defining the connection between the proxy server and the remote host.</value>
            <seealso cref="P:Coversant.Proxy.Server.Client.ClientSocket"/>
        </member>
        <member name="P:Coversant.Proxy.Server.Client.Buffer">
            <summary>Gets the buffer to store all the incoming data from the local client.</summary>
            <value>An array of bytes that can be used to store all the incoming data from the local client.</value>
            <seealso cref="P:Coversant.Proxy.Server.Client.RemoteBuffer"/>
        </member>
        <member name="P:Coversant.Proxy.Server.Client.RemoteBuffer">
            <summary>Gets the buffer to store all the incoming data from the remote host.</summary>
            <value>An array of bytes that can be used to store all the incoming data from the remote host.</value>
            <seealso cref="P:Coversant.Proxy.Server.Client.Buffer"/>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList">
            <summary>Stores a dictionary with username/password combinations.</summary>
            <remarks>This class can be used by a SOCKS5 listener.</remarks>
            <remarks>This class uses an MD5 has to store the passwords in a secure manner.</remarks>
            <remarks>The username is treated in a case-insensitive manner, the password is treated case-sensitive.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.#ctor">
            <summary>Initializes a new instance of the AuthenticationList class.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.AddItem(System.String,System.String)">
            <summary>Adds an item to the list.</summary>
            <param name="Username">The username to add.</param>
            <param name="Password">The corresponding password to add.</param>
            <exception cref="T:System.ArgumentNullException">Either Username or Password is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.AddHash(System.String,System.String)">
            <summary>Adds an item to the list.</summary>
            <param name="Username">The username to add.</param>
            <param name="PassHash">The hashed password to add.</param>
            <exception cref="T:System.ArgumentNullException">Either Username or Password is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.RemoveItem(System.String)">
            <summary>Removes an item from the list.</summary>
            <param name="Username">The username to remove.</param>
            <exception cref="T:System.ArgumentNullException">Username is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.IsItemPresent(System.String,System.String)">
            <summary>Checks whether a user/pass combination is present in the collection or not.</summary>
            <param name="Username">The username to search for.</param>
            <param name="Password">The corresponding password to search for.</param>
            <returns>True when the user/pass combination is present in the collection, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.IsUserPresent(System.String)">
            <summary>Checks whether a username is present in the collection or not.</summary>
            <param name="Username">The username to search for.</param>
            <returns>True when the username is present in the collection, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.IsHashPresent(System.String,System.String)">
            <summary>Checks whether a user/passhash combination is present in the collection or not.</summary>
            <param name="Username">The username to search for.</param>
            <param name="PassHash">The corresponding password hash to search for.</param>
            <returns>True when the user/passhash combination is present in the collection, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.Clear">
            <summary>Clears the authentication list.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.m_Listing">
            <summary>Holds the value of the Listing property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.Listing">
            <summary>Gets the StringDictionary that's used to store the user/pass combinations.</summary>
            <value>A StringDictionary object that's used to store the user/pass combinations.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.Keys">
            <summary>Gets an array with all the keys in the authentication list.</summary>
            <value>An array of strings containing all the keys in the authentication list.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.Authentication.AuthenticationList.Hashes">
            <summary>Gets an array with all the hashes in the authentication list.</summary>
            <value>An array of strings containing all the hashes in the authentication list.</value>
        </member>
        <member name="T:Coversant.CommandLine.OptionList">
            <summary>
            Option Parsing
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>setInput()</code>, then inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>needsInput() returns true because the input buffer is empty.
             You have to provide more input with <code>setInput()</code>.
             NOTE: needsInput() also returns true when, the stream is finished.
             </li>
             <li>needsDictionary() returns true, you have to provide a preset
                dictionary with <code>setDictionary()</code>.</li>
             <li>finished() returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="offset">
            The offset into buffer where the dictionary starts.
            </param>
            <param name="len">
            The length of the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buf">
            the input.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="offset">
            The offset into buffer where the input starts.
            </param>
            <param name="length">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The off and/or len are wrong.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buf has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <param name="offset">
            the offset into buffer where the output should start.
            </param>
            <param name="len">
            the maximum length of the output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if len is &lt;= 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the offset and/or len are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="lvl">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="off">
            the start of the data.
            </param>
            <param name="len">
            the length of the data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended() or if previous input is still pending.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="lvl">
            the new compression level.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetStrategy(Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            setLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If end() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset and/or length don't match the array length.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dict">
            The dictionary data
            </param>
            <param name="offset">
            An offset into the dictionary.
            </param>
            <param name="length">
            The length of the dictionary data to use
            </param>
            <exception cref="T:System.InvalidOperationException">
            If setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.GZip.GZipConstants.FTEXT">
            <summary>
            Flag bit mask for text
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.GZip.GZipConstants.FHCRC">
            <summary>
            Flag bitmask for Crc
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.GZip.GZipConstants.FEXTRA">
            <summary>
            Flag bit mask for extra
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.GZip.GZipConstants.FNAME">
            <summary>
            flag bitmask for name
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.GZip.GZipConstants.FCOMMENT">
            <summary>
            flag bit mask indicating comment is present
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Checksums.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="inCh">data update is based on</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>		
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buf">block of data</param>
            <param name="off">index of first byte to use</param>
            <param name="len">number of bytes to use</param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Client.Socks5Handler">
            <summary>
            Implements the SOCKS5 protocol.
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Client.SocksHandler">
            <summary>
            Implements a specific version of the SOCKS protocol. This is an abstract class; it must be inherited.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Client.SocksHandler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.SocksHandler.PortToBytes(System.Int32)">
            <summary>
            Converts a port number to an array of bytes.
            </summary>
            <param name="port">The port to convert.</param>
            <returns>An array of two bytes that represents the specified port.</returns>
        </member>
        <member name="M:Coversant.Proxy.Client.SocksHandler.ReadBytes(System.Int32)">
            <summary>
            Reads a specified number of bytes from the Server socket.
            </summary>
            <param name="count">The number of bytes to return.</param>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ArgumentException">The number of bytes to read is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="F:Coversant.Proxy.Client.SocksHandler.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.SocksHandler.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.SocksHandler.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.SocksHandler.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.SocksHandler.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.SocksHandler.ProtocolComplete">
            <summary>Holds the address of the method to call when the SOCKS protocol has been completed.</summary>
        </member>
        <member name="M:Coversant.Proxy.Client.SocksHandler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.SocksHandler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">The remote endpoint to connect to.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.SocksHandler.BeginNegotiate(System.Net.IPEndPoint,Coversant.Proxy.Client.HandShakeComplete,System.Net.IPEndPoint,System.Object)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device. </param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Client.SocksHandler.BeginNegotiate(System.String,System.Int32,Coversant.Proxy.Client.HandShakeComplete,System.Net.IPEndPoint,System.Object)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="P:Coversant.Proxy.Client.SocksHandler.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>A Socket object that represents the connection with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Client.SocksHandler.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>A string that holds the username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Client.SocksHandler.AsyncResult">
            <summary>
            Gets or sets the return value of the BeginConnect call.
            </summary>
            <value>An IAsyncProxyResult object that is the return value of the BeginConnect call.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.SocksHandler.Buffer">
            <summary>
            Gets or sets a byte buffer.
            </summary>
            <value>An array of bytes.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.SocksHandler.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c>  is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.Authenticate">
            <summary>
            Starts the synchronous authentication process.
            </summary>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> or <c>host</c> is invalid.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.BeginNegotiate(System.String,System.Int32,Coversant.Proxy.Client.HandShakeComplete,System.Net.IPEndPoint,System.Object)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.BeginNegotiate(System.Net.IPEndPoint,Coversant.Proxy.Client.HandShakeComplete,System.Net.IPEndPoint,System.Object)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the socket is connected to the remote server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.OnAuthSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.OnAuthReceive(System.IAsyncResult)">
            <summary>
            Called when an authentication reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.OnAuthenticated(System.Exception)">
            <summary>
            Called when the socket has been successfully authenticated with the server.
            </summary>
            <param name="e">The exception that has occured while authenticating, or <em>null</em> if no error occured.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the connection request has been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when a connection reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.ProcessReply(System.Byte[])">
            <summary>
            Processes the received reply.
            </summary>
            <param name="buffer">The received reply</param>
            <exception cref="T:System.Net.ProtocolViolationException">The received reply is invalid.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks5Handler.OnReadLast(System.IAsyncResult)">
            <summary>
            Called when the last bytes are read from the socket.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Coversant.Proxy.Client.Socks5Handler.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.Socks5Handler.m_HandShake">
            <summary>Holds the value of the HandShake property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Client.Socks5Handler.Password">
            <summary>
            Gets or sets the password to use when authenticating with the SOCKS5 server.
            </summary>
            <value>The password to use when authenticating with the SOCKS5 server.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.Socks5Handler.HandShake">
            <summary>
            Gets or sets the bytes to use when sending a connect request to the proxy server.
            </summary>
            <value>The array of bytes to use when sending a connect request to the proxy server.</value>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform">
            <summary>
            ZipNameTransform transforms name as per the Zip file convention.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.INameTransform">
            <summary>
            INameTransform defines how file system names are transformed for use with archives.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.INameTransform.TransformFile(System.String)">
            <summary>
            Given a file name determine the transformed equivalent.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.INameTransform.TransformDirectory(System.String)">
            <summary>
            Given a directory name determine the transformed equivalent.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed directory name</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <remarks>Relative paths default to true with this constructor.</remarks>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor(System.Boolean)">
            <summary>
            Initialize a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <param name="useRelativePaths">If true relative paths are created, 
            if false absolute paths are created. </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor(System.Boolean,System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <param name="useRelativePaths">If true relative paths are created, 
            if false absolute paths are created. </param>
            <param name="trimPrefix">The string to trim from front of paths if found.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a directory name according to the Zip file naming conventions.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformFile(System.String)">
            <summary>
            Transform a file name according to the Zip file naming conventions.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TrimPrefix">
            <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a byte from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.IScanFilter">
            <summary>
            Scanning filters support these operations.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.IScanFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if is 'matches' the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name matches the filter, false if it does not match.</returns>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.PathFilter">
            <summary>
            PathFilter filters directories and files by full path name.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.PathFilter.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.PathFilter"></see>.
            </summary>
            <param name="filter">The <see cref="T:Coversant.ICSharpCode.SharpZipLib.Core.NameFilter"></see>filter expression to apply.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.PathFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it matches the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>True if the name matches, false otherwise.</returns>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Core.NameAndSizeFilter">
            <summary>
            NameAnsSizeFilter filters based on name and file size.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of NameAndSizeFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="fileName">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MinSize">
            <summary>
            The minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MaxSize">
            <summary>
            The maximum size for a file that will match this filter.
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Http.HttpListener">
            <summary>Listens on a specific port on the proxy server and forwards all incoming HTTP traffic to the appropriate server.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpListener.#ctor(System.Int32)">
            <summary>Initializes a new instance of the HttpListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <remarks>The HttpListener will start listening on all installed network cards.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>Initializes a new instance of the HttpListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="Address">The address to listen on. You can specify IPAddress.Any to listen on all installed network cards.</param>
            <remarks>For the security of your server, try to avoid to listen on every network card (IPAddress.Any). Listening on a local IP address is usually sufficient and much more secure.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpListener.OnAccept(System.IAsyncResult)">
            <summary>Called when there's an incoming client connection waiting to be accepted.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpListener.ToString">
            <summary>Returns a string representation of this object.</summary>
            <returns>A string with information about this object.</returns>
        </member>
        <member name="P:Coversant.Proxy.Server.Http.HttpListener.ConstructString">
            <summary>Returns a string that holds all the construction information for this object.</summary>
            <value>A string that holds all the construction information for this object.</value>
        </member>
        <member name="T:Coversant.Proxy.Client.Authentication.AuthMethod">
            <summary>
            Implements a SOCKS authentication scheme.
            </summary>
            <remarks>This is an abstract class; it must be inherited.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthMethod.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthMethod instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthMethod.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthMethod.BeginAuthenticate(Coversant.Proxy.Client.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="F:Coversant.Proxy.Client.Authentication.AuthMethod.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.Authentication.AuthMethod.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.Authentication.AuthMethod.CallBack">
            <summary>Holds the address of the method to call when the proxy has authenticated the client.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.Authentication.AuthMethod.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Client.Authentication.AuthMethod.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>The socket connection with the proxy server.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.Authentication.AuthMethod.Buffer">
            <summary>
            Gets or sets a byt array that can be used to store data.
            </summary>
            <value>A byte array to store data.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.Authentication.AuthMethod.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream">
            <summary>
            This is an InflaterInputStream that reads the files baseInputStream an zip archive
            one after another.  It has a special method to get the zip entry of
            the next file.  The zip entry contains information about the file name
            size, compressed size, Crc, etc.
            It includes support for Stored and Deflated entries.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            
            <example> This sample shows how to read a zip file
            <code lang="C#">
            using System;
            using System.Text;
            using System.IO;
            
            using Coversant.ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]));
            		
            		ZipEntry theEntry;
            		while ((theEntry = s.GetNextEntry()) != null) {
            			int size = 2048;
            			byte[] data = new byte[2048];
            			
            			Console.Write("Show contents (y/n) ?");
            			if (Console.ReadLine() == "y") {
            				while (true) {
            					size = s.Read(data, 0, data.Length);
            					if (size > 0) {
            						Console.Write(new ASCIIEncoding().GetString(data, 0, size));
            					} else {
            						break;
            					}
            				}
            			}
            		}
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid, 
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
            <exception name="System.IO.IOException">
            An i/o error occured.
            </exception>
            <exception name="ICSharpCode.SharpZipLib.ZipException">
            The deflated stream is corrupted.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="destination">The destination for the bytes.</param>
            <param name="index">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if the entry can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buf">
            an array of bytes
            </param>
            <param name="off">
            the start of the data used for this update
            </param>
            <param name="len">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.SocksClient">
            <summary>Relays data between a remote host and a local client, using the SOCKS protocols.</summary>
            <remarks>This class implements the SOCKS4, SOCKS4a and SOCKS5 protocols.</remarks>
            <remarks>If the MustAuthenticate property is set, only SOCKS5 connections are allowed and the AuthList parameter of the constructor should not be null.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksClient.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.DestroyDelegate,Coversant.Proxy.Server.Socks.Authentication.AuthenticationList)">
            <summary>Initializes a new instance of the SocksClient class.</summary>
            <param name="ClientSocket">The Socket connection between this proxy server and the local client.</param>
            <param name="Destroyer">The method to be called when this SocksClient object disconnects from the local client and the remote server.</param>
            <param name="AuthList">The list with valid username/password combinations.</param>
            <remarks>If the AuthList is non-null, every client has to authenticate before he can use this proxy server to relay data. If it is null, the clients don't have to authenticate.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksClient.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.DestroyDelegate,Coversant.Proxy.Server.Socks.Authentication.AuthenticationList,System.Byte[],System.Byte[])">
            <summary>Initializes a new instance of the SocksClient class.</summary>
            <param name="ClientSocket">The Socket connection between this proxy server and the local client.</param>
            <param name="Destroyer">The method to be called when this SocksClient object disconnects from the local client and the remote server.</param>
            <param name="AuthList">The list with valid username/password combinations.</param>
            <param name="buffer">The buffer to use for receiving data from the client.</param>
            <param name="remoteBuffer">The buffer to use for receiving data from the remote endpoint.</param>
            <remarks>If the AuthList is non-null, every client has to authenticate before he can use this proxy server to relay data. If it is null, the clients don't have to authenticate.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksClient.StartHandshake">
            <summary>Starts communication with the client.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksClient.OnStartSocksProtocol(System.IAsyncResult)">
            <summary>Called when we have received some data from the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksClient.OnEndSocksProtocol(System.Boolean,System.Net.Sockets.Socket)">
            <summary>Called when the SOCKS protocol has ended. If the SOCKS authentication was successful we can now start relaying data.</summary>
            <param name="Success">Specifies whether the SOCKS negotiation was successful or not.</param>
            <param name="Remote">The connection with the remote server.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksClient.ToString">
            <summary>Returns text information about this SocksClient object.</summary>
            <returns>A string representing this SocksClient object.</returns>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksClient.m_AuthList">
            <summary>Holds the value of the AuthList property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksClient.m_MustAuthenticate">
            <summary>Holds the value of the MustAuthenticate property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksClient.m_Handler">
            <summary>Holds the value of the Handler property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksClient.Handler">
            <summary>Gets or sets the SOCKS handler to be used when communicating with the client.</summary>
            <value>The SocksHandler to be used when communicating with the client.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksClient.MustAuthenticate">
            <summary>Gets or sets the SOCKS handler to be used when communicating with the client.</summary>
            <value>The SocksHandler to be used when communicating with the client.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksClient.AuthList">
            <summary>Gets or sets the AuthenticationList to use when a computer tries to authenticate on the proxy server.</summary>
            <value>An instance of the AuthenticationList class that contains all the valid username/password combinations.</value>
        </member>
        <member name="T:Coversant.Proxy.Server.Ftp.FtpListener">
            <summary>Listens on a specific port on the proxy server and forwards all incoming FTP traffic to the appropriate server.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpListener.#ctor(System.Int32)">
            <summary>Initializes a new instance of the FtpListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <remarks>The FtpListener will start listening on all installed network cards.</remarks>
            <exception cref="T:System.ArgumentException">Port is not positive.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>Initializes a new instance of the FtpListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="Address">The address to listen on. You can specify IPAddress.Any to listen on all installed network cards.</param>
            <remarks>For the security of your server, try to avoid to listen on every network card (IPAddress.Any). Listening on a local IP address is usually sufficient and much more secure.</remarks>
            <exception cref="T:System.ArgumentNullException">Address is null.</exception>
            <exception cref="T:System.ArgumentException">Port is not positive.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpListener.OnAccept(System.IAsyncResult)">
            <summary>Called when there's an incoming client connection waiting to be accepted.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpListener.ToString">
            <summary>Returns a string representation of this object.</summary>
            <returns>A string with information about this object.</returns>
        </member>
        <member name="P:Coversant.Proxy.Server.Ftp.FtpListener.ConstructString">
            <summary>Returns a string that holds all the construction information for this object.</summary>
            <value>A string that holds all the construction information for this object.</value>
        </member>
        <member name="T:Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_CURSOR_INFO">
            <summary>
            The CONSOLE_CURSOR_INFO structure contains information about the console cursor.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_CURSOR_INFO.dwSize">
            <summary>Specifies a number between 1 and 100, indicating the percentage of the character cell that is filled by the cursor. The cursor appearance varies, ranging from completely filling the cell to showing up as a horizontal line at the bottom of the cell.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_CURSOR_INFO.bVisible">
            <summary>Specifies the visibility of the cursor. If the cursor is visible, this member is TRUE (nonzero).</summary>
        </member>
        <member name="T:Org.Mentalis.Utilities.ConsoleAttributes.COORD">
            <summary>
            The COORD structure defines the coordinates of a character cell in a console screen buffer. The origin of the coordinate system (0,0) is at the top, left cell of the buffer.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.COORD.x">
            <summary>Horizontal or column value.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.COORD.y">
            <summary>Vertical or row value.</summary>
        </member>
        <member name="T:Org.Mentalis.Utilities.ConsoleAttributes.SMALL_RECT">
            <summary>
            The SMALL_RECT structure defines the coordinates of the upper left and lower right corners of a rectangle.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.SMALL_RECT.Left">
            <summary>Specifies the x-coordinate of the upper left corner of the rectangle.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.SMALL_RECT.Top">
            <summary>Specifies the y-coordinate of the upper left corner of the rectangle.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.SMALL_RECT.Right">
            <summary>Specifies the x-coordinate of the lower right corner of the rectangle.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.SMALL_RECT.Bottom">
            <summary>Specifies the y-coordinate of the lower right corner of the rectangle.</summary>
        </member>
        <member name="T:Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_SCREEN_BUFFER_INFO">
            <summary>
            The CONSOLE_SCREEN_BUFFER_INFO structure contains information about a console screen buffer.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_SCREEN_BUFFER_INFO.dwSize">
            <summary>Specifies the size, in character columns and rows, of the screen buffer.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_SCREEN_BUFFER_INFO.dwCursorPosition">
            <summary>Specifies the column and row coordinates of the cursor in the screen buffer.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_SCREEN_BUFFER_INFO.wAttributes">
            <summary>Specifies the foreground (text) and background color attributes to be used for characters that are written to a screen buffer by the WriteFile and WriteConsole functions, or echoed to a screen buffer by the ReadFile and ReadConsole functions. The attribute values are some combination of the following values: FOREGROUND_BLUE, FOREGROUND_GREEN, FOREGROUND_RED, FOREGROUND_INTENSITY, BACKGROUND_BLUE, BACKGROUND_GREEN, BACKGROUND_RED, and BACKGROUND_INTENSITY.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_SCREEN_BUFFER_INFO.srWindow">
            <summary>Specifies a SMALL_RECT structure that contains the screen buffer coordinates of the upper-left and lower-right corners of the display window.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_SCREEN_BUFFER_INFO.dwMaximumWindowSize">
            <summary>Specifies the maximum size of the console window, given the current screen buffer size and font and the screen size.</summary>
        </member>
        <member name="T:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor">
            <summary>Enumerates all available colors for the forecolor or the backcolor of the console.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.Black">
            <summary>Black</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.Red">
            <summary>Red</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.LightRed">
            <summary>Light red</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.Green">
            <summary>Green</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.LightGreen">
            <summary>Light green</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.Blue">
            <summary>Blue</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.LightBlue">
            <summary>Light blue</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.Gold">
            <summary>Gold</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.Yellow">
            <summary>Yellow</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.Cyan">
            <summary>Cyan</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.LightCyan">
            <summary>Light cyan</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.Purple">
            <summary>Purple</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.LightPurple">
            <summary>Light purple</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.Gray">
            <summary>Gray</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleColor.White">
            <summary>White</summary>
        </member>
        <member name="T:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes">
            <summary>The ConsoleAttributes class can change several attributes of your console window.</summary>
            <example>
            The following example wil change the forecolor of te console, disable 'EchoInput', ask for a string and show that string.
            <code>
            ConsoleAttributes.ForeColor = ConsoleColor.White;
            Console.Write("Please enter your password: ");
            ConsoleAttributes.EchoInput = false;
            string ThePass = Console.ReadLine();
            ConsoleAttributes.EchoInput = true;
            ConsoleAttributes.ForeColor = ConsoleColor.Gray;
            Console.WriteLine("");
            Console.WriteLine("The password you entered was: " + ThePass);
            Console.WriteLine("Press enter to exit...");
            Console.Read();
            </code>
            </example>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.BacgroundColors">
            <summary>
            Lists all the possible background color values.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.ForegroundColors">
            <summary>
            Lists all the possible foreground color values.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.SetConsoleTextAttribute(System.Int32,System.Int32)">
            <summary>
            The SetConsoleTextAttribute function sets the foreground (text) and background color attributes of characters written to the screen buffer by the WriteFile or WriteConsole function, or echoed by the ReadFile or ReadConsole function. This function affects only text written after the function call.
            </summary>
            <param name="hConsoleOutput">Handle to a console screen buffer. The handle must have GENERIC_READ access.</param>
            <param name="wAttributes">Specifies the foreground and background color attributes. Any combination of the following values can be specified: FOREGROUND_BLUE, FOREGROUND_GREEN, FOREGROUND_RED, FOREGROUND_INTENSITY, BACKGROUND_BLUE, BACKGROUND_GREEN, BACKGROUND_RED, and BACKGROUND_INTENSITY.</param>
            <returns>If the function succeeds, the return value is nonzero.<br></br><br>If the function fails, the return value is zero. To get extended error information, call GetLastError.</br></returns>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.GetStdHandle(System.Int32)">
            <summary>
            The GetStdHandle function returns a handle for the standard input, standard output, or standard error device.
            </summary>
            <param name="nStdHandle">Specifies the device for which to return the handle. This parameter can have one of the following values:
            <list type="bullet"> 
            	<listheader>
            		<value>Value</value>
            		<meaning>Meaning</meaning>
            	</listheader>
            	<item>
            		<value>STD_INPUT_HANDLE</value>
            		<meaning>Standard input handle.</meaning>
            	</item>
            	<item>
            		<value>STD_OUTPUT_HANDLE</value>
            		<meaning>Standard output handle.</meaning>
            	</item>
            	<item>
            		<value>STD_ERROR_HANDLE</value>
            		<meaning>Standard error handle.</meaning>
            	</item>
            </list>
            </param>
            <returns>If the function succeeds, the return value is a handle to the specified device.<br></br><br>If the function fails, the return value is the INVALID_HANDLE_VALUE flag. To get extended error information, call GetLastError.</br></returns>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.SetConsoleCursorInfo(System.Int32,Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_CURSOR_INFO@)">
            <summary>
            The SetConsoleCursorInfo function sets the size and visibility of the cursor for the specified console screen buffer.
            </summary>
            <param name="hConsoleOutput">Handle to a console screen buffer. The handle must have GENERIC_WRITE access.</param>
            <param name="lpConsoleCursorInfo">Pointer to a CONSOLE_CURSOR_INFO structure containing the new specifications for the screen buffer's cursor.</param>
            <returns>If the function succeeds, the return value is nonzero.<br></br><br>If the function fails, the return value is zero. To get extended error information, call GetLastError.</br></returns>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.GetConsoleMode(System.Int32,System.Int32@)">
            <summary>
            The GetConsoleMode function reports the current input mode of a console's input buffer or the current output mode of a console screen buffer.
            </summary>
            <param name="hConsoleHandle">Handle to a console input buffer or a screen buffer. The handle must have GENERIC_READ access.</param>
            <param name="lpConsoleCursorInfo">
            Pointer to a 32-bit variable that indicates the current mode of the specified buffer.<br>If the hConsoleHandle parameter is an input handle, the mode can be a combination of the following values. When a console is created, all input modes except ENABLE_WINDOW_INPUT are enabled by default.</br>
            <list type="bullet">
            	<listheader>
            		<value>Value</value>
            		<meaning>Meaning</meaning>
            	</listheader>
            	<item>
            		<value>ENABLE_LINE_INPUT</value>
            		<meaning>The ReadFile or ReadConsole function returns only when a carriage return character is read. If this mode is disabled, the functions return when one or more characters are available.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_ECHO_INPUT</value>
            		<meaning>Characters read by the ReadFile or ReadConsole function are written to the active screen buffer as they are read. This mode can be used only if the ENABLE_LINE_INPUT mode is also enabled.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_PROCESSED_INPUT</value>
            		<meaning>ctrl+c is processed by the system and is not placed in the input buffer. If the input buffer is being read by ReadFile or ReadConsole, other control keys are processed by the system and are not returned in the ReadFile or ReadConsole buffer. If the ENABLE_LINE_INPUT mode is also enabled, backspace, carriage return, and linefeed characters are handled by the system.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_WINDOW_INPUT</value>
            		<meaning>User interactions that change the size of the console screen buffer are reported in the console's input buffer. Information about these events can be read from the input buffer by applications using the ReadConsoleInput function, but not by those using ReadFile or ReadConsole.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_MOUSE_INPUT</value>
            		<meaning>If the mouse pointer is within the borders of the console window and the window has the keyboard focus, mouse events generated by mouse movement and button presses are placed in the input buffer. These events are discarded by ReadFile or ReadConsole, even when this mode is enabled.</meaning>
            	</item>
            </list>
            If the hConsoleHandle parameter is a screen buffer handle, the mode can be a combination of the following values. When a screen buffer is created, both output modes are enabled by default.
            <list type="bullet">
            	<listheader>
            		<value>Value</value>
            		<meaning>Meaning</meaning>
            	</listheader>
            	<item>
            		<value>ENABLE_PROCESSED_OUTPUT</value>
            		<meaning>Characters written by the WriteFile or WriteConsole function or echoed by the ReadFile or ReadConsole function are parsed for ASCII control sequences, and the correct action is performed. Backspace, tab, bell, carriage return, and linefeed characters are processed.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_WRAP_AT_EOL_OUTPUT</value>
            		<meaning>When writing with WriteFile or WriteConsole or echoing with ReadFile or ReadConsole, the cursor moves to the beginning of the next row when it reaches the end of the current row. This causes the rows displayed in the console window to scroll up automatically when the cursor advances beyond the last row in the window. It also causes the contents of the screen buffer to scroll up (discarding the top row of the screen buffer) when the cursor advances beyond the last row in the screen buffer. If this mode is disabled, the last character in the row is overwritten with any subsequent characters.</meaning>
            	</item>
            </list>
            </param>
            <returns>If the function succeeds, the return value is nonzero.<br></br><br>If the function fails, the return value is zero. To get extended error information, call GetLastError.</br></returns>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.SetConsoleMode(System.Int32,System.Int32)">
            <summary>
            The SetConsoleMode function sets the input mode of a console's input buffer or the output mode of a console screen buffer.
            </summary>
            <param name="hConsoleHandle">Handle to a console input buffer or a screen buffer. The handle must have GENERIC_WRITE access.</param>
            <param name="lpConsoleCursorInfo">
            Pointer to a 32-bit variable that indicates the current mode of the specified buffer.<br>If the hConsoleHandle parameter is an input handle, the mode can be a combination of the following values. When a console is created, all input modes except ENABLE_WINDOW_INPUT are enabled by default.</br>
            <list type="bullet">
            	<listheader>
            		<value>Value</value>
            		<meaning>Meaning</meaning>
            	</listheader>
            	<item>
            		<value>ENABLE_LINE_INPUT</value>
            		<meaning>The ReadFile or ReadConsole function returns only when a carriage return character is read. If this mode is disabled, the functions return when one or more characters are available.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_ECHO_INPUT</value>
            		<meaning>Characters read by the ReadFile or ReadConsole function are written to the active screen buffer as they are read. This mode can be used only if the ENABLE_LINE_INPUT mode is also enabled.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_PROCESSED_INPUT</value>
            		<meaning>ctrl+c is processed by the system and is not placed in the input buffer. If the input buffer is being read by ReadFile or ReadConsole, other control keys are processed by the system and are not returned in the ReadFile or ReadConsole buffer. If the ENABLE_LINE_INPUT mode is also enabled, backspace, carriage return, and linefeed characters are handled by the system.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_WINDOW_INPUT</value>
            		<meaning>User interactions that change the size of the console screen buffer are reported in the console's input buffer. Information about these events can be read from the input buffer by applications using the ReadConsoleInput function, but not by those using ReadFile or ReadConsole.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_MOUSE_INPUT</value>
            		<meaning>If the mouse pointer is within the borders of the console window and the window has the keyboard focus, mouse events generated by mouse movement and button presses are placed in the input buffer. These events are discarded by ReadFile or ReadConsole, even when this mode is enabled.</meaning>
            	</item>
            </list>
            If the hConsoleHandle parameter is a screen buffer handle, the mode can be a combination of the following values. When a screen buffer is created, both output modes are enabled by default.
            <list type="bullet">
            	<listheader>
            		<value>Value</value>
            		<meaning>Meaning</meaning>
            	</listheader>
            	<item>
            		<value>ENABLE_PROCESSED_OUTPUT</value>
            		<meaning>Characters written by the WriteFile or WriteConsole function or echoed by the ReadFile or ReadConsole function are parsed for ASCII control sequences, and the correct action is performed. Backspace, tab, bell, carriage return, and linefeed characters are processed.</meaning>
            	</item>
            	<item>
            		<value>ENABLE_WRAP_AT_EOL_OUTPUT</value>
            		<meaning>When writing with WriteFile or WriteConsole or echoing with ReadFile or ReadConsole, the cursor moves to the beginning of the next row when it reaches the end of the current row. This causes the rows displayed in the console window to scroll up automatically when the cursor advances beyond the last row in the window. It also causes the contents of the screen buffer to scroll up (discarding the top row of the screen buffer) when the cursor advances beyond the last row in the screen buffer. If this mode is disabled, the last character in the row is overwritten with any subsequent characters.</meaning>
            	</item>
            </list>
            </param>
            <returns>If the function succeeds, the return value is nonzero.<br></br><br>If the function fails, the return value is zero. To get extended error information, call GetLastError.</br></returns>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.SetConsoleTitle(System.String)">
            <summary>
            The SetConsoleTitle function sets the title bar string for the current console window.
            </summary>
            <param name="lpConsoleTitle">Pointer to a null-terminated string that contains the string to appear in the title bar of the console window.</param>
            <returns>If the function succeeds, the return value is nonzero.<br></br><br>If the function fails, the return value is zero. To get extended error information, call GetLastError.</br></returns>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.GetConsoleTitle(System.Text.StringBuilder,System.Int32)">
            <summary>
            The GetConsoleTitle function retrieves the title bar string for the current console window.
            </summary>
            <param name="lpConsoleTitle">Pointer to a buffer that receives a null-terminated string containing the text that appears in the title bar of the console window.</param>
            <param name="nSize">Specifies the size, in characters, of the buffer pointed to by the lpConsoleTitle parameter.</param>
            <returns>If the function succeeds, the return value is the length, in characters, of the string copied to the buffer.<br></br><br>If the function fails, the return value is zero. To get extended error information, call GetLastError.</br></returns>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.GetConsoleScreenBufferInfo(System.Int32,Org.Mentalis.Utilities.ConsoleAttributes.CONSOLE_SCREEN_BUFFER_INFO@)">
            <summary>
            The GetConsoleScreenBufferInfo function retrieves information about the specified console screen buffer.
            </summary>
            <param name="hConsoleOutput">Handle to a console screen buffer. The handle must have GENERIC_READ access.</param>
            <param name="lpConsoleScreenBufferInfo">Pointer to a CONSOLE_SCREEN_BUFFER_INFO structure in which the screen buffer information is returned.</param>
            <returns>If the function succeeds, the return value is nonzero.<br></br><br>If the function fails, the return value is zero. To get extended error information, call GetLastError.</br></returns>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.SetConsoleCursorPosition(System.Int32,Org.Mentalis.Utilities.ConsoleAttributes.COORD@)">
            <summary>
            The SetConsoleCursorPosition function sets the cursor position in the specified console screen buffer.
            </summary>
            <param name="hConsoleOutput">Handle to a console screen buffer. The handle must have GENERIC_WRITE access.</param>
            <param name="dwCursorPosition">Specifies a COORD structure containing the new cursor position. The coordinates are the column and row of a screen buffer character cell. The coordinates must be within the boundaries of the screen buffer.</param>
            <returns>If the function succeeds, the return value is nonzero.<br></br><br>If the function fails, the return value is zero. To get extended error information, call GetLastError.</br></returns>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.ChangeCursor">
            <summary>Applies the current cursor settings.</summary>
            <remarks>This method applies changes in the CursorVisible and OvrMode properties.</remarks>
        </member>
        <member name="M:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.MoveCursor(System.Int16,System.Int16)">
            <summary>Moves the cursor to the specified location.</summary>
            <param name="x">Specifies the x value of the new location.</param>
            <param name="y">Specifies the y value of the new location.</param>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.STD_OUTPUT_HANDLE">
            <summary>Standard output handle.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.STD_INPUT_HANDLE">
            <summary>Standard input handle.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.ENABLE_ECHO_INPUT">
            <summary>Characters read by the ReadFile or ReadConsole function are written to the active screen buffer as they are read. This mode can be used only if the ENABLE_LINE_INPUT mode is also enabled.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.m_ForeColor">
            <summary>Holds the forecolor of the console window.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.m_BackColor">
            <summary>Holds the backcolor of the console window.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.m_CursorVisible">
            <summary>Holds the value of the CursorVisible property.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.m_OvrMode">
            <summary>Holds the value of the OvrMode property.</summary>
        </member>
        <member name="F:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.m_EchoInput">
            <summary>Holds the value of the EchoInput property.</summary>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.ForeColor">
            <summary>Gets or sets the color of the console font.</summary>
            <value>A value of the ConsoleColor enum that specifies the color of the console font.</value>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.BackColor">
            <summary>Gets or sets the color of the console background.</summary>
            <value>A value of the ConsoleColor enum that specifies the color of the console background.</value>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.CursorVisible">
            <summary>Gets or sets whether the cursor is visible or not.</summary>
            <value>A boolean value that specifies the visibility of the cursor.</value>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.OvrMode">
            <summary>Gets or sets whether the cursor is in overwrite-mode or not.</summary>
            <value>A boolean value that specifies the mode of the cursor.</value>
            <remarks>In overwrite mode, the cursor size will be 50% of the character space instead of 25% in normal mode</remarks>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.EchoInput">
            <summary>Gets or sets whether the console must echo the input or not.</summary>
            <value>A boolean value that specifies the console must echo the input or not.</value>
            <remarks>EchoInput is often turned off when the program asks the user to type in a password.</remarks>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.Caption">
            <summary>Gets or sets the caption of the console.</summary>
            <value>A String that specifies the caption of the console.</value>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.CursorX">
            <summary>Gets or sets the current cursos position on the x axis in the console.</summary>
            <value>A short that specifies the current cursos position on the x axis in the console.</value>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.CursorY">
            <summary>Gets or sets the current cursos position on the y axis in the console.</summary>
            <value>A short value that specifies the current cursos position on the y axis in the console.</value>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.WindowWidth">
            <summary>Gets the width (in characters) of the console window.</summary>
            <value>An integer that holds the width of the console window in characters.</value>
        </member>
        <member name="P:Org.Mentalis.Utilities.ConsoleAttributes.ConsoleAttributes.WindowHeight">
            <summary>Gets the height (in characters) of the console window.</summary>
            <value>An integer that holds the height of the console window in characters.</value>
        </member>
        <member name="T:Coversant.Proxy.Client.ProxyTypes">
            <summary>
            Specifies the type of proxy servers that an instance of the ProxySocket class can use.
            </summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxyTypes.None">
            <summary>No proxy server; the ProxySocket object behaves exactly like an ordinary Socket object.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxyTypes.Socks4">
            <summary>A SOCKS4[A] proxy server.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxyTypes.Socks5">
            <summary>A SOCKS5 proxy server.</summary>
        </member>
        <member name="T:Coversant.Proxy.Client.NotAProxySocketException">
            <summary>
            Thrown by a consuming entity if you attempt to set Proxy properties and the socket is not a ProxySocket.
            </summary>
            <remarks>
            This situation will only occur when a socket is accepted using <c>Socket.Accept</c> or <c>Socket.BeginAccept</c>
            </remarks>
        </member>
        <member name="M:Coversant.Proxy.Client.NotAProxySocketException.#ctor">
            <summary>
            Initializes a new instance of the NotAProxySocketException class.
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Client.ProxySocket">
            <summary>
            Implements a Socket class that can connect trough a SOCKS proxy server.
            </summary>
            <remarks>This class implements SOCKS4[A] and SOCKS5.<br>It does not, however, implement the BIND commands.</br></remarks>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <param name="proxyPassword">The password to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> -or- <c>proxyPassword</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">An error occured while talking to the proxy server.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="host">The remote host to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">An error occured while talking to the proxy server.</exception>
            <remarks>If you use this method with a SOCKS4 server, it will let the server resolve the hostname. Not all SOCKS4 servers support this 'remote DNS' though.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port on the remote host to connect to.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <exception cref="T:System.ArgumentNullException">The asyncResult parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The asyncResult parameter was not returned by a call to the BeginConnect method.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">EndConnect was previously called for the asynchronous connection.</exception>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">The proxy server refused the connection.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.BeginDns(System.String,Coversant.Proxy.Client.HandShakeComplete)">
            <summary>
            Begins an asynchronous request to resolve a DNS host name or IP address in dotted-quad notation to an IPAddress instance.
            </summary>
            <param name="host">The host to resolve.</param>
            <param name="callback">The method to call when the hostname has been resolved.</param>
            <returns>An IAsyncResult instance that references the asynchronous request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">There was an error while trying to resolve the host.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.OnResolved(System.IAsyncResult)">
            <summary>
            Called when the specified hostname has been resolved.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote host.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxySocket.OnHandShakeComplete(System.Exception)">
            <summary>
            Called when the Socket has finished talking to the proxy server and is ready to relay data.
            </summary>
            <param name="error">The error to throw when the EndConnect method is called.</param>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxySocket.m_State">
            <summary>Holds the value of the State property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxySocket.m_ProxyEndPoint">
            <summary>Holds the value of the ProxyEndPoint property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxySocket.m_ProxyType">
            <summary>Holds the value of the ProxyType property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxySocket.m_ProxyUser">
            <summary>Holds the value of the ProxyUser property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxySocket.m_ProxyPass">
            <summary>Holds the value of the ProxyPass property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxySocket.CallBack">
            <summary>Holds a pointer to the method that should be called when the Socket is connected to the remote device.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxySocket.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxySocket.m_ToThrow">
            <summary>Holds the value of the ToThrow property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.ProxySocket.m_RemotePort">
            <summary>Holds the value of the RemotePort property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Client.ProxySocket.ProxyEndPoint">
            <summary>
            Gets or sets the EndPoint of the proxy server.
            </summary>
            <value>An IPEndPoint object that holds the IP address and the port of the proxy server.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.ProxySocket.ProxyType">
            <summary>
            Gets or sets the type of proxy server to use.
            </summary>
            <value>One of the ProxyTypes values.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.ProxySocket.State">
            <summary>
            Gets or sets a user-defined object.
            </summary>
            <value>The user-defined object.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.ProxySocket.ProxyUser">
            <summary>
            Gets or sets the username to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the username that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Client.ProxySocket.ProxyPass">
            <summary>
            Gets or sets the password to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the password that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Client.ProxySocket.AsyncResult">
            <summary>
            Gets or sets the asynchronous result object.
            </summary>
            <value>An instance of the IAsyncProxyResult class.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.ProxySocket.ToThrow">
            <summary>
            Gets or sets the exception to throw when the EndConnect method is called.
            </summary>
            <value>An instance of the Exception class (or subclasses of Exception).</value>
        </member>
        <member name="P:Coversant.Proxy.Client.ProxySocket.RemotePort">
            <summary>
            Gets or sets the remote port the user wants to connect to.
            </summary>
            <value>An integer that specifies the port the user wants to connect to.</value>
        </member>
        <member name="T:Coversant.Proxy.Client.ProxyException">
            <summary>
            The exception that is thrown when a proxy error occurs.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxyException.#ctor">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxyException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.ProxyException.Socks5ToString(System.Int32)">
            <summary>
            Converts a SOCKS5 error number to a human readable string.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
            <returns>A string representation of the specified SOCKS5 error number.</returns>
        </member>
        <member name="T:Coversant.Proxy.Client.Authentication.AuthNone">
            <summary>
            This class implements the 'No Authentication' scheme.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthNone.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthNone instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthNone.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthNone.BeginAuthenticate(Coversant.Proxy.Client.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <remarks>This method immediately calls the callback method.</remarks>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "bval">
            the byte is taken as the lower 8 bits of bval
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.ConnectReceivedDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksListener">
            <summary>
            The XMPPBytestreamsSocksListener is used for Socks 5 Bytestreaming (JEP-0065).
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.SocksListener">
            <summary>Listens on a specific port on the proxy server for incoming SOCKS4 and SOCKS5 requests.</summary>
            <remarks>This class also implements the SOCKS4a protocol.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksListener.#ctor(System.Int32)">
            <summary>Initializes a new instance of the SocksListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <remarks>The SocksListener will listen on all available network cards and it will not use an AuthenticationList.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>Initializes a new instance of the SocksListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="Address">The address to listen on. You can specify IPAddress.Any to listen on all installed network cards.</param>
            <remarks>For the security of your server, try to avoid to listen on every network card (IPAddress.Any). Listening on a local IP address is usually sufficient and much more secure.</remarks>
            <remarks>The SocksListener object will not use an AuthenticationList.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksListener.#ctor(System.Int32,Coversant.Proxy.Server.Socks.Authentication.AuthenticationList)">
            <summary>Initializes a new instance of the SocksListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="AuthList">The list of valid login/password combinations. If you do not need password authentication, set this parameter to null.</param>
            <remarks>The SocksListener will listen on all available network cards.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksListener.#ctor(System.Net.IPAddress,System.Int32,Coversant.Proxy.Server.Socks.Authentication.AuthenticationList)">
            <summary>Initializes a new instance of the SocksListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="Address">The address to listen on. You can specify IPAddress.Any to listen on all installed network cards.</param>
            <param name="AuthList">The list of valid login/password combinations. If you do not need password authentication, set this parameter to null.</param>
            <remarks>For the security of your server, try to avoid to listen on every network card (IPAddress.Any). Listening on a local IP address is usually sufficient and much more secure.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksListener.OnAccept(System.IAsyncResult)">
            <summary>Called when there's an incoming client connection waiting to be accepted.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksListener.ToString">
            <summary>Returns a string representation of this object.</summary>
            <returns>A string with information about this object.</returns>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksListener.m_AuthList">
            <summary>Holds the value of the AuthList property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksListener.AuthList">
            <summary>Gets or sets the AuthenticationList to be used when a SOCKS5 client connects.</summary>
            <value>An AuthenticationList that is to be used when a SOCKS5 client connects.</value>
            <remarks>This value can be null.</remarks>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksListener.ConstructString">
            <summary>Returns a string that holds all the construction information for this object.</summary>
            <value>A string that holds all the construction information for this object.</value>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksListener._connectReceived">
            <summary>
            Delegate called when a connect request is received and processed but before sending the response
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksListener.#ctor(System.Int32,Coversant.Proxy.Server.Socks.ConnectReceivedDelegate,Coversant.Proxy.Server.IByteBufferPool,Coversant.Proxy.Server.DestroyDelegate)">
            <summary>Initializes a new instance of the XMPPBytestreamsSocksListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="connectReceived">The method to be called with this SocksClient receives and processes a CONNECT command.</param>
            <param name="bufferPool">The pool of buffers to use in the proxy.</param>
            <param name="destroyer">The method to be called when a proxy client connection is shut down.</param>
            <remarks>The SocksListener will listen on all available network cards and it will not use an AuthenticationList.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksListener.#ctor(System.Net.IPAddress,System.Int32,Coversant.Proxy.Server.Socks.ConnectReceivedDelegate,Coversant.Proxy.Server.IByteBufferPool,Coversant.Proxy.Server.DestroyDelegate)">
            <summary>Initializes a new instance of the XMPPBytestreamsSocksListener class.</summary>
            <param name="Port">The port to listen on.</param>
            <param name="Address">The address to listen on. You can specify IPAddress.Any to listen on all installed network cards.</param>
            <param name="connectReceived">The method to be called with this SocksClient receives and processes a CONNECT command.</param>
            <param name="bufferPool">The pool of buffers to use in the proxy.</param>
            <param name="destroyer">The method to be called when a proxy client connection is shut down.</param>
            <remarks>For the security of your server, try to avoid to listen on every network card (IPAddress.Any). Listening on a local IP address is usually sufficient and much more secure.</remarks>
            <remarks>The SocksListener object will not use an AuthenticationList.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksListener.OnAccept(System.IAsyncResult)">
            <summary>Called when there's an incoming client connection waiting to be accepted.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksListener.RemoveClient(Coversant.Proxy.Server.Client)">
            <summary>
            Must be called by the destroyer method specified in the constructor
            </summary>
            <param name="client">The XMPPByteStreamsSocksClient that has been closed.</param>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.NegotiationCompleteDelegate">
            <summary>Defines the signature of the method that's called when the SOCKS negotiation is complete.</summary>
            <param name="Success">Indicates whether the negotiation was successful or not.</param>
            <param name="Remote">The connection with the remote server.</param>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.SocksHandler">
            <summary>Implements a specific version of the SOCKS protocol.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.Socks.NegotiationCompleteDelegate)">
            <summary>Initializes a new instance of the SocksHandler class.</summary>
            <param name="ClientConnection">The connection with the client.</param>
            <param name="Callback">The method to call when the SOCKS negotiation is complete.</param>
            <exception cref="T:System.ArgumentNullException"><c>Callback</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.Dispose(System.Boolean)">
            <summary>Closes the listening socket if present, and signals the parent object that SOCKS negotiation is complete.</summary>
            <param name="Success">Indicates whether the SOCKS negotiation was successful or not.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.StartNegotiating">
            <summary>Starts accepting bytes from the client.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.OnReceiveBytes(System.IAsyncResult)">
            <summary>Called when we receive some bytes from the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.OnDisposeGood(System.IAsyncResult)">
            <summary>Called when an OK reply has been sent to the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.OnDisposeBad(System.IAsyncResult)">
            <summary>Called when a negative reply has been sent to the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.AddBytes(System.Byte[],System.Int32)">
            <summary>Adds some bytes to a byte aray.</summary>
            <param name="NewBytes">The new bytes to add.</param>
            <param name="Cnt">The number of bytes to add.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.OnStartAccept(System.IAsyncResult)">
            <summary>Called when the AcceptSocket should start accepting incoming connections.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.OnAccept(System.IAsyncResult)">
            <summary>Called when there's an incoming connection in the AcceptSocket queue.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.Dispose(System.Byte)">
            <summary>Sends a reply to the client connection and disposes it afterwards.</summary>
            <param name="Value">A byte that contains the reply code to send to the client.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.IsValidRequest(System.Byte[])">
            <summary>Checks whether a specific request is a valid SOCKS request or not.</summary>
            <param name="Request">The request array to check.</param>
            <returns>True is the specified request is valid, false otherwise</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.SocksHandler.ProcessRequest(System.Byte[])">
            <summary>Processes a SOCKS request from a client.</summary>
            <param name="Request">The request to process.</param>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksHandler.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksHandler.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksHandler.m_Bytes">
            <summary>Holds the value of the Bytes property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksHandler.m_RemoteConnection">
            <summary>Holds the value of the RemoteConnection property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksHandler.m_Connection">
            <summary>Holds the value of the Connection property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksHandler.m_AcceptSocket">
            <summary>Holds the value of the AcceptSocket property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksHandler.m_RemoteBindIP">
            <summary>Holds the value of the RemoteBindIP property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.SocksHandler.Signaler">
            <summary>Holds the address of the method to call when the SOCKS negotiation is complete.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksHandler.Username">
            <summary>Gets or sets the username of the SOCKS user.</summary>
            <value>A String representing the username of the logged on user.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksHandler.Connection">
            <summary>Gets or sets the connection with the client.</summary>
            <value>A Socket representing the connection between the proxy server and the SOCKS client.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksHandler.Buffer">
            <summary>Gets a buffer that can be used when receiving bytes from the client.</summary>
            <value>A byte array that can be used when receiving bytes from the client.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksHandler.Bytes">
            <summary>Gets or sets a byte array that can be used to store received bytes from the client.</summary>
            <value>A byte array that can be used to store bytes from the client.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksHandler.RemoteConnection">
            <summary>Gets or sets the connection with the remote host.</summary>
            <value>A Socket representing the connection between the proxy server and the remote host.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksHandler.AcceptSocket">
            <summary>Gets or sets the socket that is used to accept incoming connections.</summary>
            <value>A Socket that is used to accept incoming connections.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.SocksHandler.RemoteBindIP">
            <summary>Gets or sets the IP address of the requested remote server.</summary>
            <value>An IPAddress object specifying the address of the requested remote server.</value>
        </member>
        <member name="T:Coversant.Proxy.Server.Ftp.FtpClient">
            <summary>Relays FTP commands between a remote host and a local client.</summary>
            <remarks>This class supports the 'OPEN' command, 'USER user@host:port' and 'USER user@host port'.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.DestroyDelegate)">
            <summary>Initializes a new instance of the FtpClient class.</summary>
            <param name="ClientSocket">The Socket connection between this proxy server and the local client.</param>
            <param name="Destroyer">The callback method to be called when this Client object disconnects from the local client and the remote server.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.StartHandshake">
            <summary>Sends a welcome message to the client.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.OnHelloSent(System.IAsyncResult)">
            <summary>Called when the welcome message has been sent to the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.OnReceiveCommand(System.IAsyncResult)">
            <summary>Called when we have received some bytes from the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.ProcessCommand(System.String)">
            <summary>Processes an FTP command, sent from the client.</summary>
            <param name="Command">The command to process.</param>
            <returns>True if the command may be sent to the server, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.ProcessPortCommand(System.String)">
            <summary>Processes a PORT command, sent from the client.</summary>
            <param name="Input">The parameters of the PORT command.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.ParseIPPort(System.String)">
            <summary>Parses an IP address and port from a specified input string.</summary>
            <remarks>The input string is of the following form:<br>  <c>HOST:PORT</c></br><br><em>or</em></br><br>  <c>HOST PORT</c></br></remarks>
            <param name="Input">The string to parse.</param>
            <returns>An instance of the IPEndPoint class if successful, null otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.ConnectTo(System.Net.IPEndPoint)">
            <summary>Connects to the specified endpoint.</summary>
            <param name="RemoteServer">The IPEndPoint to connect to.</param>
            <exception cref="T:System.Net.Sockets.SocketException">There was an error connecting to the specified endpoint</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.OnRemoteConnected(System.IAsyncResult)">
            <summary>Called when we're connected to the remote FTP server.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.OnIgnoreReply(System.IAsyncResult)">
            <summary>Called when we receive a reply from the FTP server that should be ignored.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.OnCommandSent(System.IAsyncResult)">
            <summary>Called when an FTP command has been successfully sent to the FTP server.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.OnReplyReceived(System.IAsyncResult)">
            <summary>Called when we receive a reply from the FTP server.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.OnReplySent(System.IAsyncResult)">
            <summary>Called when the reply from the FTP server has been sent to the local FTP client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.SendCommand(System.String)">
            <summary>Sends a string to the local FTP client.</summary>
            <param name="Command">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.IsValidCommand(System.String)">
            <summary>Checks whether a specified command is a complete FTP command or not.</summary>
            <param name="Command">A string containing the command to check.</param>
            <returns>True if the command is complete, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.IsValidReply(System.String)">
            <summary>Checks whether a specified reply is a complete FTP reply or not.</summary>
            <param name="Input">A string containing the reply to check.</param>
            <returns>True is the reply is complete, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpClient.ToString">
            <summary>Returns text information about this FtpClient object.</summary>
            <returns>A string representing this FtpClient object.</returns>
        </member>
        <member name="F:Coversant.Proxy.Server.Ftp.FtpClient.m_User">
            <summary>Holds the value of the User property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Ftp.FtpClient.m_FtpCommand">
            <summary>Holds the value of the FtpCommand property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Ftp.FtpClient.m_FtpReply">
            <summary>Holds the value of the FtpReply property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Ftp.FtpClient.m_DataForward">
            <summary>Holds the value of the DataForward property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Ftp.FtpClient.FtpCommand">
            <summary>Gets or sets a property that can be used to store the received FTP command.</summary>
            <value>A string that can be used to store the received FTP command.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Ftp.FtpClient.FtpReply">
            <summary>Gets or sets a property that can be used to store the received FTP reply.</summary>
            <value>A string that can be used to store the received FTP reply.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Ftp.FtpClient.User">
            <summary>Gets or sets a string containing the logged on username.</summary>
            <value>A string containing the logged on username.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Ftp.FtpClient.DataForward">
            <summary>Gets or sets the dataconnection object used to transmit files and other data from and to the FTP server.</summary>
            <value>An FtpDataConnection object that's used to transmit files and other data from and to the FTP server.</value>
        </member>
        <member name="T:Coversant.Proxy.Client.HandShakeComplete">
            <summary>
            References the callback method to be called when the protocol negotiation is completed.
            </summary>
        </member>
        <member name="F:Coversant.Chart.Analyzer.ChartTreeView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Coversant.Chart.Analyzer.ChartTreeView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Coversant.Threading.CoversantLock`1">
            <summary>
            Provides a wrapper around a Lock construct for the various Coversant Lock Classes
            </summary>
            <typeparam name="T">A Lock of some sort: <c>ReaderWriterLock</c>, <c>Monitor</c>, etc</typeparam>
        </member>
        <member name="T:Coversant.Threading.WriterLock">
            <summary>
            Class to allow easy acquisition / release of a Writer Lock in a ReaderWriterLock scenario.
            </summary>
            <remarks>
            Allows the writer lock to be acquired using <c>Using</c> syntax, rather than <c>Try/Finally</c> syntax.
            </remarks>
        </member>
        <member name="T:Coversant.Threading.ReaderLock">
            <summary>
            Class to allow easy acquisition / release of a Writer Lock in a ReaderWriterLock scenario.
            </summary>
            <remarks>
            Allows the reader lock to be acquired using <c>Using</c> syntax, rather than <c>Try/Finally</c> syntax.
            </remarks>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry">
            <summary>
            This class represents an entry in a Tar archive. It consists
            of the entry's header, as well as the entry's File. Entries
            can be instantiated in one of three ways, depending on how
            they are to be used.
            <p>
            TarEntries that are created from the header bytes read from
            an archive are instantiated with the TarEntry( byte[] )
            constructor. These entries will be used when extracting from
            or listing the contents of an archive. These entries have their
            header filled in using the header bytes. They also set the File
            to null, since they reference an archive entry not a file.</p>
            <p>
            TarEntries that are created from files that are to be written
            into an archive are instantiated with the CreateEntryFromFile(string)
            pseudo constructor. These entries have their header filled in using
            the File's information. They also keep a reference to the File
            for convenience when writing entries.</p>
            <p>
            Finally, TarEntries can be constructed from nothing but a name.
            This allows the programmer to construct the entry by hand, for
            instance when only an InputStream is available for writing to
            the archive, and the header information is constructed from
            other information. In this case the header fields are set to
            defaults and the File is set to null.</p>
            
            <see cref="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader"/>
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.file">
            <summary>
            The name of the file this entry represents or null if the entry is not based on a file.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.header">
            <summary>
            The entry's header information.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor">
            <summary>
            Only allow creation of Entries with the static CreateXYZ factory methods.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(System.Byte[])">
            <summary>
            Construct an entry from an archive's header bytes. File is set
            to null.
            </summary>
            <param name = "headerBuf">
            The header bytes from a tar archive entry.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader)">
            <summary>
            Construct a TarEntry using the <paramref name="header">header</paramref> provided
            </summary>
            <param name="header">Header details for entry</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.Clone">
            <summary>
            Clone this tar entry.
            </summary>
            <returns>Returns a clone of this entry.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.CreateTarEntry(System.String)">
            <summary>
            Construct an entry with only a <paramref name="name"></paramref>.
            This allows the programmer to construct the entry's header "by hand". 
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.CreateEntryFromFile(System.String)">
            <summary>
            Construct an entry for a file. File is set to file, and the
            header is constructed from information from the file.
            </summary>
            <param name = "fileName">
            The file that the entry represents.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.Initialize">
            <summary>
            Initialization code common to all pseudo constructors.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.Equals(System.Object)">
            <summary>
            Determine if the two entries are equal. Equality is determined
            by the header names being equal.
            </summary>
            <returns>
            True if the entries are equal.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.GetHashCode">
            <summary>
            Must be overridden when you override Equals.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.IsDescendent(Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Determine if the given entry is a descendant of this entry.
            Descendancy is determined by the name of the descendant
            starting with this entry's name.
            </summary>
            <param name = "desc">
            Entry to be checked as a descendent of this.
            </param>
            <returns>
            True if entry is a descendant of this.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.SetIds(System.Int32,System.Int32)">
            <summary>
            Convenience method to set this entry's group and user ids.
            </summary>
            <param name="userId">
            This entry's new user id.
            </param>
            <param name="groupId">
            This entry's new group id.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.SetNames(System.String,System.String)">
            <summary>
            Convenience method to set this entry's group and user names.
            </summary>
            <param name="userName">
            This entry's new user name.
            </param>
            <param name="groupName">
            This entry's new group name.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.AdjustEntryName(System.Byte[],System.String)">
            <summary>
            Convenience method that will modify an entry's name directly
            in place in an entry header buffer byte array.
            </summary>
            <param name="outbuf">
            The buffer containing the entry header to modify.
            </param>
            <param name="newName">
            The new name to place into the header buffer.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.GetFileTarHeader(Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader with information from a File.
            </summary>
            <param name="hdr">
            The TarHeader to fill in.
            </param>
            <param name="file">
            The file from which to get the header information.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.GetDirectoryEntries">
            <summary>
            Get entries for all files present in this entries directory.
            If this entry doesnt represent a directory zero entries are returned.
            </summary>
            <returns>
            An array of TarEntry's for this entry's children.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.WriteEntryHeader(System.Byte[])">
            <summary>
            Write an entry's header information to a header buffer.
            </summary>
            <param name = "outbuf">
            The tar entry header buffer to fill in.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.NameTarHeader(Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader given only the entry's name.
            </summary>
            <param name="hdr">
            The TarHeader to fill in.
            </param>
            <param name="name">
            The tar entry name.
            </param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader">
            <summary>
            Get this entry's header.
            </summary>
            <returns>
            This entry's TarHeader.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.Name">
            <summary>
            Get/Set this entry's name.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.UserId">
            <summary>
            Get/set this entry's user id.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.GroupId">
            <summary>
            Get/set this entry's group id.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.UserName">
            <summary>
            Get/set this entry's user name.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.GroupName">
            <summary>
            Get/set this entry's group name.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.ModTime">
            <summary>
            Get/Set the modification time for this entry
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.File">
            <summary>
            Get this entry's file.
            </summary>
            <returns>
            This entry's file.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.Size">
            <summary>
            Get/set this entry's recorded file size.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarEntry.IsDirectory">
            <summary>
            Return true if this entry represents a directory, false otherwise
            </summary>
            <returns>
            True if this entry is a directory.
            </returns>
        </member>
        <member name="T:Coversant.Proxy.Server.IByteBufferPool">
            <summary>
            Represents a pool of byte buffers to be used by the proxy server.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.IByteBufferPool.CheckIn(System.Byte[])">
            <summary>
            Check a buffer into the pool
            </summary>
            <param name="buffer">The byte buffer to check back in</param>
        </member>
        <member name="M:Coversant.Proxy.Server.IByteBufferPool.CheckOut">
            <summary>
            Check a buffer out from the pool for use.
            </summary>
            <returns>An initialized byte buffer for use.</returns>
        </member>
        <member name="M:Coversant.Proxy.MathFix.Floor(System.Decimal)">
            <summary>
            HACK: Fix System.Math.Floor(decimal) and System.Math.Floor(double) ambiguous call.
            </summary>
            <param name="value">Decimal value to pass to System.Math.Floor</param>
            <returns>Largest integer value that is equal to or less than value.</returns>
        </member>
        <member name="M:Coversant.Chart.ChartValueRange.CheckRange(Coversant.Chart.ChartValue)">
            <summary>
            Check to see if ChartValue fits in this range.
            </summary>
            <param name="cv">ChartValue to check.</param>
            <returns>true if it fits.</returns>
        </member>
        <member name="M:Coversant.Chart.ChartValueRange.CheckRange(Coversant.Chart.ChartValueRange)">
            <summary>
            Check this range against another.
            </summary>
            <param name="range">Range to compare to.</param>
            <returns>True if this range is smaller than the one passed in.</returns>
        </member>
        <member name="M:Coversant.Chart.ChartValueRange.CheckRange(Coversant.Chart.ChartValueRange,System.Boolean)">
            <summary>
            Check this range against another.
            </summary>
            <param name="range">Range to compare to.</param>
            <param name="expand">Expand the range to fit the one passed in.</param>
            <returns>True if this range was expanded.</returns>
        </member>
        <member name="M:Coversant.Chart.ChartValueRange.CheckRange(Coversant.Chart.ChartValue,System.Boolean)">
            <summary>
            Check to see if the ChartValue fits in the range.  Set the expand option to true to make sure it will fit.
            </summary>
            <param name="cv">Chart Value to check</param>
            <param name="expand">Expand the range if it does not fit.</param>
            <returns>True if it fit.  False if it was expanded.</returns>
        </member>
        <member name="T:Coversant.TimeoutResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Coversant.TimeoutResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Coversant.TimeoutResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Coversant.TimeoutResource.TimeoutDate">
            <summary>
              Looks up a localized string similar to 01132007.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream">
            <summary>
            This is a DeflaterOutputStream that writes the files into a zip
            archive one after another.  It has a special method to start a new
            zip entry.  The zip entries contains information about the file name
            size, compressed size, CRC, etc.
            
            It includes support for Stored and Deflated entries.
            This class is not thread safe.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example> This sample shows how to create a zip file
            <code>
            using System;
            using System.IO;
            
            using Coversant.ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		string[] filenames = Directory.GetFiles(args[0]);
            		
            		ZipOutputStream s = new ZipOutputStream(File.Create(args[1]));
            		
            		s.SetLevel(5); // 0 - store only to 9 - means best compression
            		
            		foreach (string file in filenames) {
            			FileStream fs = File.OpenRead(file);
            			
            			byte[] buffer = new byte[fs.Length];
            			fs.Read(buffer, 0, buffer.Length);
            			
            			ZipEntry entry = new ZipEntry(file);
            			
            			s.PutNextEntry(entry);
            			
            			s.Write(buffer, 0, buffer.Length);
            			
            		}
            		
            		s.Finish();
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment string
            </param>
            <exception name ="ArgumentOutOfRangeException">
            Encoding of comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets default compression level.  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflate compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(Coversant.ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            Archive size is invalid
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets boolean indicating central header has been added for this archive...
            No further entries can be added once this has been done.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException">
            <summary>
            Represents errors specific to Zip file handling
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.Authentication.AuthenticationCompleteDelegate">
            <summary>Defines the signature of the method to be called when the authentication is complete.</summary>
            <param name="Success">Specifies whether the authentication was successfull or not.</param>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.Authentication.AuthBase">
            <summary>Authenticates a user on a SOCKS5 server according to the implemented subprotocol.</summary>
            <remarks>This is an abstract class. The subprotocol that's used to authenticate a user is specified in the subclasses of this base class.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthBase.#ctor">
            <summary>Initializes a new instance of the AuthBase class.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthBase.StartAuthentication(System.Net.Sockets.Socket,Coversant.Proxy.Server.Socks.Authentication.AuthenticationCompleteDelegate)">
            <summary>Starts the authentication process.</summary>
            <remarks>This abstract method must be implemented in the subclasses, according to the selected subprotocol.</remarks>
            <param name="Connection">The connection with the SOCKS client.</param>
            <param name="Callback">The method to call when the authentication is complete.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthBase.AddBytes(System.Byte[],System.Int32)">
            <summary>Adds bytes to the array returned by the Bytes property.</summary>
            <param name="NewBytes">The bytes to add.</param>
            <param name="Cnt">The number of bytes to add.</param>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.Authentication.AuthBase.Callback">
            <summary>The method to call when the authentication is complete.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.Authentication.AuthBase.m_Connection">
            <summary>Holds the value of the Connection property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.Authentication.AuthBase.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.Authentication.AuthBase.m_Bytes">
            <summary>Holds the value of the Bytes property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.Authentication.AuthBase.Connection">
            <summary>Gets or sets the Socket connection between the proxy server and the SOCKS client.</summary>
            <value>A Socket instance defining the connection between the proxy server and the local client.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.Authentication.AuthBase.Buffer">
            <summary>Gets a buffer that can be used to receive data from the client connection.</summary>
            <value>An array of bytes that can be used to receive data from the client connection.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.Authentication.AuthBase.Bytes">
            <summary>Gets or sets an array of bytes that can be used to store all received data.</summary>
            <value>An array of bytes that can be used to store all received data.</value>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            Not supported by #Zip
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Not supported by #Zip
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
            <summary>
            If set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Method">
            <summary>
            Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
            <summary>
            If set a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Patched">
            <summary>
            If set indicates the file contains Pkzip compressed patched data.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            If set strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Reserved by PKWare for enhanced compression.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            If set indicates that values in the local header are masked to hide
            their actual values.
            </summary>
            <remarks>
            Used when encrypting ht ecentral directory contents.
            </remarks>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCVER">
            <summary>
            Offset of version to extract in local entry header
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCFLG">
            <summary>
            Offset of general purpose flags in local entry header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHOW">
            <summary>
            Offset of compression method in local entry header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCTIM">
            <summary>
            Offset of last mod file time + date in local entry header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCCRC">
            <summary>
            Offset of crc-32 in local entry header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIZ">
            <summary>
            Offset of compressed size in local entry header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCLEN">
            <summary>
            Offset of uncompressed size in local entry header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCNAM">
            <summary>
            Offset of file name length in local entry header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCEXT">
            <summary>
            Offset of extra field length in local entry header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTCRC">
            <summary>
            Offset of crc-32 in data descriptor
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIZ">
            <summary>
            Offset of compressed size in data descriptor
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTLEN">
            <summary>
            Offset of uncompressed length in data descriptor
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENVEM">
            <summary>
            Offset of version made by in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENVER">
            <summary>
            Offset of version needed to extract in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENFLG">
            <summary>
            Offset of general purpose bit flag in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHOW">
            <summary>
            Offset of compression method in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENTIM">
            <summary>
            Offset of time/date in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENCRC">
            <summary>
            Offset of crc-32 in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIZ">
            <summary>
            Offset of compressed size in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENLEN">
            <summary>
            Offset of uncompressed size in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENNAM">
            <summary>
            Offset of file name length in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENEXT">
            <summary>
            Offset of extra field length in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENCOM">
            <summary>
            Offset of file comment length in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDSK">
            <summary>
            Offset of disk start number in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENATT">
            <summary>
            Offset of internal file attributes in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENATX">
            <summary>
            Offset of external file attributes in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENOFF">
            <summary>
            Offset of relative offset of local header in central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDNRD">
            <summary>
            Offset of number of this disk
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDDCD">
            <summary>
            Offset of number of disk with start of central directory
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSUB">
            <summary>
            Offset of number of entries in the central directory of this disk
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDTOT">
            <summary>
            Offset of total number of entries in the central directory
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIZ">
            <summary>
            Offset of size of central directory
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDOFF">
            <summary>
            Offset of offset of start of central directory with respect to starting disk number
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDCOM">
            <summary>
            Offset of ZIP file comment length
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="length">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system Ansi code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream">
            <summary>
            The TarInputStream reads a UNIX tar archive as an InputStream.
            methods are provided to position at each successive entry in
            the archive, and the read each entry as a normal input stream
            using read().
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.hasHitEOF">
            <summary>
            Flag set when last block has been read
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.entrySize">
            <summary>
            Size of this entry as recorded in header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.entryOffset">
            <summary>
            Number of bytes read for this entry so far
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.readBuf">
            <summary>
            Buffer used with calls to <code>Read()</code>
            </summary>		
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.buffer">
            <summary>
            Working buffer
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.currEntry">
            <summary>
            Current entry being read
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.eFactory">
            <summary>
            Factory used to create TarEntry or descendant class instance
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a TarInputStream with default block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a TarInputStream with user specified block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
            <param name="blockFactor">block factor to apply to archive</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.SetEntryFactory(Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory)">
            <summary>
            Set the entry factory for this instance.
            </summary>
            <param name="factory">The factory for creating new entries</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Close">
            <summary>
            Closes this stream. Calls the TarBuffer's close() method.
            The underlying stream is closed by the TarBuffer.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            TarBuffer record size.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Skip(System.Int64)">
            <summary>
            Skip bytes in the input buffer. This skips bytes in the
            current entry's data, not the entire archive, and will
            stop at the end of the current entry's data if the number
            to skip extends beyond that point.
            </summary>
            <param name="numToSkip">
            The number of bytes to skip.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Mark(System.Int32)">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
            <param name ="markLimit">
            The limit to mark.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Reset">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.GetNextEntry">
            <summary>
            Get the next entry in this tar archive. This will skip
            over any remaining data in the current entry, if there
            is one, and place the input stream at the header of the
            next entry, and read the header and instantiate a new
            TarEntry from the header bytes and return that entry.
            If there are no more entries in the archive, null will
            be returned to indicate that the end of the archive has
            been reached.
            </summary>
            <returns>
            The next TarEntry in the archive, or null.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.ReadByte">
            <summary>
            Reads a byte from the current tar archive entry.
            This method simply calls read(byte[], int, int).
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the current tar archive entry.
            
            This method is aware of the boundaries of the current
            entry in the archive and will deal with them appropriately
            </summary>
            <param name="outputBuffer">
            The buffer into which to place bytes read.
            </param>
            <param name="offset">
            The offset at which to place bytes read.
            </param>
            <param name="count">
            The number of bytes to read.
            </param>
            <returns>
            The number of bytes read, or 0 at end of stream/EOF.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.CopyEntryContents(System.IO.Stream)">
            <summary>
            Copies the contents of the current tar archive entry directly into
            an output stream.
            </summary>
            <param name="outputStream">
            The OutputStream into which to write the entry's data.
            </param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            This property always returns false.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.CanWrite">
            <summary>
            Gets a value indicating if the stream supports writing.
            This property always returns false.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Length">
            <summary>
            The length in bytes of the stream
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Position">
            <summary>
            Gets or sets the position within the stream. 
            Setting the Position is not supported and throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.Available">
            <summary>
            Get the available data that can be read from the current
            entry in the archive. This does not indicate how much data
            is left in the entire archive, only in the current entry.
            This value is determined from the entry's size header field
            and the amount of data already read from the current entry.
            </summary>
            <returns>
            The number of available bytes for the current entry.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.IsMarkSupported">
            <summary>
            Since we do not support marking just yet, we return false.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory">
            <summary>
            This interface is provided, along with the method setEntryFactory(), to allow
            the programmer to have their own TarEntry subclass instantiated for the
            entries return from getNextEntry().
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.String)">
            <summary>
            Create an entry based on name alone
            </summary>
            <param name="name">
            Name of the new EntryPointNotFoundException to create
            </param>
            <returns>created TarEntry or descendant class</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntryFromFile(System.String)">
            <summary>
            Create an instance based on an actual file
            </summary>
            <param name="fileName">
            Name of file to represent in the entry
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.Byte[])">
            <summary>
            Create a tar entry based on the header information passed
            </summary>
            <param name="headerBuf">
            Buffer containing header information to base entry on
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter">
            <summary>
            Standard entry factory class creating instances of the class TarEntry
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.String)">
            <summary>
            Create a TarEntry based on named
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntryFromFile(System.String)">
            <summary>
            Create a tar entry with details obtained from <paramref name="fileName">file</paramref>
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.Byte[])">
            <summary>
            Create and entry based on details in <paramref name="headerBuf">header</paramref>
            </summary>			
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocks5Handler">
            <summary>
            Summary description for XMPPBytestreamsSocks5Handler.
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.Socks5Handler">
            <summary>Implements the SOCKS5 protocol.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.Socks.NegotiationCompleteDelegate,Coversant.Proxy.Server.Socks.Authentication.AuthenticationList)">
            <summary>Initializes a new instance of the Socks5Handler class.</summary>
            <param name="ClientConnection">The connection with the client.</param>
            <param name="Callback">The method to call when the SOCKS negotiation is complete.</param>
            <param name="AuthList">The authentication list to use when clients connect.</param>
            <exception cref="T:System.ArgumentNullException"><c>Callback</c> is null.</exception>
            <remarks>If the AuthList parameter is null, no authentication will be required when a client connects to the proxy server.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.Socks.NegotiationCompleteDelegate)">
            <summary>Initializes a new instance of the Socks5Handler class.</summary>
            <param name="ClientConnection">The connection with the client.</param>
            <param name="Callback">The method to call when the SOCKS negotiation is complete.</param>
            <exception cref="T:System.ArgumentNullException"><c>Callback</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.IsValidRequest(System.Byte[])">
            <summary>Checks whether a specific request is a valid SOCKS request or not.</summary>
            <param name="Request">The request array to check.</param>
            <returns>True is the specified request is valid, false otherwise</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.ProcessRequest(System.Byte[])">
            <summary>Processes a SOCKS request from a client and selects an authentication method.</summary>
            <param name="Request">The request to process.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.OnAuthSent(System.IAsyncResult)">
            <summary>Called when client has been notified of the selected authentication method.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.OnAuthenticationComplete(System.Boolean)">
            <summary>Called when the authentication is complete.</summary>
            <param name="Success">Indicates whether the authentication was successful ot not.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.OnRecvRequest(System.IAsyncResult)">
            <summary>Called when we received the request of the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.IsValidQuery(System.Byte[])">
            <summary>Checks whether a specified query is a valid query or not.</summary>
            <param name="Query">The query to check.</param>
            <returns>True if the query is valid, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.ProcessQuery(System.Byte[])">
            <summary>Processes a received query.</summary>
            <param name="Query">The query to process.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.OnConnected(System.IAsyncResult)">
            <summary>Called when we're successfully connected to the remote host.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.OnAccept(System.IAsyncResult)">
            <summary>Called when there's an incoming connection in the AcceptSocket queue.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks5Handler.Dispose(System.Byte)">
            <summary>Sends a reply to the client connection and disposes it afterwards.</summary>
            <param name="Value">A byte that contains the reply code to send to the client.</param>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.Socks5Handler.m_AuthList">
            <summary>Holds the value of the AuthList property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.Socks5Handler.m_AuthMethod">
            <summary>Holds the value of the AuthMethod property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.Socks5Handler.AuthMethod">
            <summary>Gets or sets the the AuthBase object to use when trying to authenticate the SOCKS client.</summary>
            <value>The AuthBase object to use when trying to authenticate the SOCKS client.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.Socks5Handler.AuthList">
            <summary>Gets or sets the AuthenticationList object to use when trying to authenticate the SOCKS client.</summary>
            <value>The AuthenticationList object to use when trying to authenticate the SOCKS client.</value>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocks5Handler._connectReceived">
            <summary>
            Holds the ConnectReceivedDelegate to be used when a CONNECT request is processed.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocks5Handler.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.Socks.NegotiationCompleteDelegate,Coversant.Proxy.Server.Socks.Authentication.AuthenticationList,Coversant.Proxy.Server.Socks.ConnectReceivedDelegate)">
            <summary>Initializes a new instance of the Socks5Handler class.</summary>
            <param name="ClientConnection">The connection with the client.</param>
            <param name="Callback">The method to call when the SOCKS negotiation is complete.</param>
            <param name="AuthList">The authentication list to use when clients connect.</param>
            <param name="connectReceived">The method to be called with this SocksClient receives and processes a CONNECT command.</param>
            <exception cref="T:System.ArgumentNullException"><c>Callback</c> is null.</exception>
            <remarks>If the AuthList parameter is null, no authentication will be required when a client connects to the proxy server.</remarks>
        </member>
        <member name="T:Coversant.Proxy.Client.Socks4Handler">
            <summary>
            Implements the SOCKS4[A] protocol.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <remarks>Resolving the host name will be done at server side. Do note that some SOCKS4 servers do not implement this functionality.</remarks>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Coversant.Proxy.Client.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.BeginNegotiate(System.String,System.Int32,Coversant.Proxy.Client.HandShakeComplete,System.Net.IPEndPoint,System.Object)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.BeginNegotiate(System.Net.IPEndPoint,Coversant.Proxy.Client.HandShakeComplete,System.Net.IPEndPoint,System.Object)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the Socket has sent the handshake data.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Socks4Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the Socket has received a reply from the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Coversant.Chart.Analyzer.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Coversant.Chart.Analyzer.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Coversant.Chart.Analyzer.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents">
            <summary>
            FastZipEvents supports all events applicable to <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip">FastZip</see> operations.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">
            <summary>
            Delegate to invoke when processing directories.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessFile">
            <summary>
            Delegate to invoke when processing files.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">
            <summary>
            Delegate to invoke when processing directory failures.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents.FileFailure">
            <summary>
            Delegate to invoke when processing file failures.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the directory failure event.
            </summary>
            <param name="directory">The directory.</param>
            <param name="e">The exception for this event.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raises the file failure event.
            </summary>
            <param name="file">The file for this event.</param>
            <param name="e">The exception for this event.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessFile(System.String)">
            <summary>
            Raises the ProcessFileEvent.
            </summary>
            <param name="file">The file for this event.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raises the ProcessDirectoryEvent.
            </summary>
            <param name="directory">The directory for this event.</param>
            <param name="hasMatchingFiles">Flag indicating if directory has matching files as determined by the current filter.</param>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip">
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            Only relative paths are supported.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.#ctor">
            <summary>
            Initialize a default instance of FastZip.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.#ctor(Coversant.ICSharpCode.SharpZipLib.Zip.FastZipEvents)">
            <summary>
            Initialise a new instance of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip"/>
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
            <param name="directoryFilter">The directory filter to apply.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a zip file/archive.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to obtain files and directories from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,System.String)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="fileFilter">A filter to apply to files.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite,Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String)">
            <summary>
            Exatract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.CreateEmptyDirectories">
            <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.NameTransform">
            <summary>
            Get or set the <see cref="T:Coversant.ICSharpCode.SharpZipLib.Zip.ZipNameTransform"> active when creating Zip files.</see>
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">
            <summary>
            Defines the desired handling when overwriting files.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Prompt">
            <summary>
            Prompt the user to confirm overwriting
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Never">
            <summary>
            Never overwrite files.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Always">
            <summary>
            Always overwrite files.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate">
            <summary>
            Delegate called when confirming overwriting of files.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="abyte">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="len">length of pattern to copy</param>
            <param name="dist">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="len">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dict">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="len">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader">
            <summary>
            This class encapsulates the Tar Entry Header used in Tar Archives.
            The class also holds a number of tar constants, used mostly in headers.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMOFS">
            <summary>
            Offset of checksum in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_OLDNORM">
            <summary>
             The "old way" of indicating a normal file.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_NORMAL">
            <summary>
            Normal file type.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_LINK">
            <summary>
            Link file type.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_SYMLINK">
            <summary>
            Symbolic link file type.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CHR">
            <summary>
            Character device file type.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_BLK">
            <summary>
            Block device file type.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_DIR">
            <summary>
            Directory file type.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_FIFO">
            <summary>
            FIFO (pipe) file type.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CONTIG">
            <summary>
            Contiguous file type.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GHDR">
            <summary>
            Posix.1 2001 global extended header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_ACL">
            <summary>
            Solaris access control list file type
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_DUMPDIR">
            <summary>
            GNU dir dump file type
            This is a dir entry that contains the names of files that were in the
            dir at the time the dump was made
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_EXTATTR">
            <summary>
            Solaris Extended Attribute File
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_META">
            <summary>
            Inode (metadata only) no file content
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGLINK">
            <summary>
            Identifies the next file on the tape as having a long link name
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGNAME">
            <summary>
            Identifies the next file on the tape as having a long name
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_MULTIVOL">
            <summary>
            Continuation of a file that began on another volume
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_NAMES">
            <summary>
            For storing filenames that dont fit in the main header (old GNU)
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_SPARSE">
            <summary>
            GNU Sparse file
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_VOLHDR">
            <summary>
            GNU Tape/volume header ignore on extraction
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.NAMELEN">
            <summary>
            The length of the name field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.MODELEN">
            <summary>
            The length of the mode field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.UIDLEN">
            <summary>
            The length of the user id field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GIDLEN">
            <summary>
            The length of the group id field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMLEN">
            <summary>
            The length of the checksum field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.SIZELEN">
            <summary>
            The length of the size field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.MAGICLEN">
            <summary>
            The length of the magic field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.VERSIONLEN">
            <summary>
            The length of the version field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.MODTIMELEN">
            <summary>
            The length of the modification time field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.UNAMELEN">
            <summary>
            The length of the user name field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GNAMELEN">
            <summary>
            The length of the group name field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.DEVLEN">
            <summary>
            The length of the devices field in a header buffer.
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LF_XHDR">
            <summary>
            Posix.1 2001 extended header
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.TMAGIC">
            <summary>
            The magic tag representing a POSIX tar archive.  (includes trailing NULL)
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GNU_TMAGIC">
            <summary>
            The magic tag representing an old GNU tar archive where version is included in magic and overwrites it
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.#ctor">
            <summary>
            Initialise a default TarHeader instance
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.SetValueDefaults(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set defaults for values used when constructing a TarHeader instance.
            </summary>
            <param name="userId">Value to apply as a default for userId.</param>
            <param name="userName">Value to apply as a default for userName.</param>
            <param name="groupId">Value to apply as a default for groupId.</param>
            <param name="groupName">Value to apply as a default for groupName.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.ResetValueDefaults">
            <summary>
            Reset value defaults to initial values.
            </summary>
            <remarks>
            The default values are user id=0, group id=0, groupname="None", user name=null.
            When the default user name is null the value from Environment.UserName is used. Or "PocketPC" for the Compact framework.
            When the default group name is null the value "None" is used.
            </remarks>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.Clone">
            <summary>
            Clone a TAR header.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetHashCode">
            <summary>
            Get a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.Equals(System.Object)">
            <summary>
            Determines if this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetName">
            <summary>
            Get the name of this entry.
            </summary>
            <returns>The entry's name.</returns>
            <remarks>
            This is obsolete use the Name property instead.
            </remarks>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.ParseOctal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse an octal string from a header buffer.
            </summary>
            <param name = "header">The header buffer from which to parse.</param>
            <param name = "offset">The offset into the buffer from which to parse.</param>
            <param name = "length">The number of header bytes to parse.</param>
            <returns>The long equivalent of the octal string.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.ParseName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse a name from a header buffer.
            </summary>
            <param name="header">
            The header buffer from which to parse.
            </param>
            <param name="offset">
            The offset into the buffer from which to parse.
            </param>
            <param name="length">
            The number of header bytes to parse.
            </param>
            <returns>
            The name parsed.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buf">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buf">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">
            The name to add
            </param>
            <param name="buf">
            The buffer to add to
            </param>
            <param name="offset">
            The offset into the buffer from which to start adding
            </param>
            <param name="length">
            The number of header bytes to add
            </param>
            <returns>
            The index of the next free byte in the buffer
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">The name to add</param>
            <param name="buf">The buffer to add to</param>
            <param name="offset">The offset into the buffer from which to start adding</param>
            <param name="length">The number of header bytes to add</param>
            <returns>The index of the next free byte in the buffer</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetAsciiBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a string to a buffer as a collection of ascii bytes.
            </summary>
            <param name="toAdd">The string to add</param>
            <param name="nameOffset">The offset of the first character to add.</param>
            <param name="buffer">The buffer to add to.</param>
            <param name="bufferOffset">The offset to start adding at.</param>
            <param name="length">The number of ascii characters to add.</param>
            <returns>The next free index in the buffer.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "val">
            the value to be converted to octal
            </param>
            <param name = "buf">
            buffer to store the octal string
            </param>
            <param name = "offset">
            The offset into the buffer where the value starts
            </param>
            <param name = "length">
            The length of the octal string to create
            </param>
            <returns>
            The offset of the character next byte after the octal string
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetLongOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "val">Value to be convert to octal</param>
            <param name = "buf">The buffer to update</param>
            <param name = "offset">The offset into the buffer to store the value</param>
            <param name = "length">The length of the octal string</param>
            <returns>Index of next byte</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GetCheckSumOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add the checksum integer to header buffer.
            </summary>
            <param name = "val"></param>
            <param name = "buf">The header buffer to set the checksum for</param>
            <param name = "offset">The offset into the buffer for the checksum</param>
            <param name = "length">The number of header bytes to update.
            It's formatted differently from the other fields: it has 6 digits, a
            null, then a space -- rather than digits, a space, then a null.
            The final space is already there, from checksumming
            </param>
            <returns>The modified buffer offset</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.ComputeCheckSum(System.Byte[])">
            <summary>
            Compute the checksum for a tar entry header.  
            The checksum field must be all spaces prior to this happening
            </summary>
            <param name = "buf">The tar entry's header buffer.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.MakeCheckSum(System.Byte[])">
            <summary>
            Make a checksum for a tar entry ignoring the checksum contents.
            </summary>
            <param name = "buf">The tar entry's header buffer.</param>
            <returns>The checksum for the buffer</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.ParseBuffer(System.Byte[])">
            <summary>
            Parse TarHeader information from a header buffer.
            </summary>
            <param name = "header">
            The tar entry header buffer to get information from.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.WriteHeader(System.Byte[])">
            <summary>
            'Write' header information to buffer provided, updating the <see cref="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">check sum</see>.
            </summary>
            <param name="outbuf">output buffer for header information</param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.Name">
            <summary>
            Get/set the name for this tar entry.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set the property to null.</exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.Mode">
            <summary>
            Get/set the entry's Unix style permission mode.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.UserId">
            <summary>
            The entry's user id.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            The default is zero.
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GroupId">
            <summary>
            Get/set the entry's group id.
            </summary>
            <remarks>
            This is only directly relevant to linux/unix systems.
            The default value is zero.
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.Size">
            <summary>
            Get/set the entry's size.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the size to less than zero.</exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.ModTime">
            <summary>
            Get/set the entry's modification time.
            </summary>
            <remarks>
            The modification time is only accurate to within a second.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the date time to less than 1/1/1970.</exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">
            <summary>
            Get the entry's checksum.  This is only valid/updated after writing or reading an entry.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.IsChecksumValid">
            <summary>
            Get value of true if the header checksum is valid, false otherwise.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.TypeFlag">
            <summary>
            Get/set the entry's type flag.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.LinkName">
            <summary>
            The entry's link name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set LinkName to null.</exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.Magic">
            <summary>
            Get/set the entry's magic tag.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Magic to null.</exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.Version">
            <summary>
            The entry's version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Version to null.</exception>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.UserName">
            <summary>
            The entry's user name.
            </summary>
            <remarks>
            See <see cref="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.ResetValueDefaults">ResetValueDefaults</see>
            for detail on how this value is derived.
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.GroupName">
            <summary>
            Get/set the entry's group name.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            </remarks>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.DevMajor">
            <summary>
            Get/set the entry's major device number.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarHeader.DevMinor">
            <summary>
            Get/set the entry's minor device number.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer">
            <summary>
            The TarBuffer class implements the tar archive concept
            of a buffered input stream. This concept goes back to the
            days of blocked tape drives and special io devices. In the
            C# universe, the only real function that this class
            performs is to ensure that files have the correct "record"
            size, or other tars will complain.
            <p>
            You should never have a need to access this class directly.
            TarBuffers are created by Tar IO Streams.
            </p>
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockSize">
            <summary>
            The size of a block in a tar archive in bytes.
            </summary>
            <remarks>This is 512 bytes.</remarks>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultBlockFactor">
            <summary>
            The number of blocks in a default record.
            </summary>
            <remarks>
            The default value is 20 block per record.
            </remarks>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultRecordSize">
            <summary>
            The size in bytes of a default record.
            </summary>
            <remarks>
            The default size is 10KB.
            </remarks>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.#ctor">
            <summary>
            Construct a default TarBuffer
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream)">
            <summary>
            Create TarBuffer for reading with default BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for reading inputStream setting BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream)">
            <summary>
            Construct TarBuffer for writing with default BlockFactor
            </summary>
            <param name="outputStream">output stream for buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for writing Tar output to streams.
            </summary>
            <param name="outputStream">Output stream to write to.</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.Initialize(System.Int32)">
            <summary>
            Initialization common to all constructors.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.GetBlockFactor">
            <summary>
            Get the TAR Buffer's block factor
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.GetRecordSize">
            <summary>
            Get the TAR Buffer's record size.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.IsEOFBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates End of Archive. End of
            archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.SkipBlock">
            <summary>
            Skip over a block on the input stream.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadBlock">
            <summary>
            Read a block from the input stream.
            </summary>
            <returns>
            The block of data read.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadRecord">
            <summary>
            Read a record from data stream.
            </summary>
            <returns>
            false if End-Of-File, else true.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <returns>
            The current zero based block number.
            </returns>
            <remarks>
            The absolute block number = (<see cref="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">record number</see> * <see cref="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">block factor</see>) + <see cref="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">block number</see>.
            </remarks>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[])">
            <summary>
            Write a block of data to the archive.
            </summary>
            <param name="block">
            The data to write to the archive.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[],System.Int32)">
            <summary>
            Write an archive record to the archive, where the record may be
            inside of a larger array buffer. The buffer must be "offset plus
            record size" long.
            </summary>
            <param name="buf">
            The buffer containing the record data to write.
            </param>
            <param name="offset">
            The offset of the record data within buf.
            </param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteRecord">
            <summary>
            Write a TarBuffer record to the archive.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.Flush">
            <summary>
            Flush the current data block if it has any data in it.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.Close">
            <summary>
            Close the TarBuffer. If this is an output buffer, also flush the
            current block before closing.
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.RecordSize">
            <summary>
            Get the record size for this buffer
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">
            <summary>
            Get the Blocking factor for the buffer
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Ftp.FtpDataConnection">
            <summary>Relays FTP data between a remote host and a local client.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.#ctor">
            <summary>Initializes a new instance of the FtpDataConnection class.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.ProcessPort(System.Net.IPEndPoint)">
            <summary>Initializes a new instance of the FtpDataConnection class.</summary>
            <param name="RemoteAddress">The address on the local FTP client to connect to.</param>
            <returns>The PORT command string to send to the FTP server.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.OnPortConnected(System.IAsyncResult)">
            <summary>Called when we're connected to the data port on the local FTP client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.OnPortAccept(System.IAsyncResult)">
            <summary>Called when there's a connection from the remote FTP server waiting to be accepted.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.StartHandshake">
            <summary>Starts relaying data between the remote FTP server and the local FTP client.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.ProcessPasv(Coversant.Proxy.Server.Ftp.FtpClient)">
            <summary>Called when the proxy server processes a PASV command.</summary>
            <param name="Parent">The parent FtpClient object.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.ProcessPasvReplyRecv(System.String)">
            <summary>Called when the FtpClient receives a reply on the PASV command from the server.</summary>
            <param name="Input">The received reply.</param>
            <returns>True if the input has been processed successfully, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.ProcessPasvReply(System.String)">
            <summary>Processes a PASV reply from the server.</summary>
            <param name="Reply">The reply to process.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.ParsePasvIP(System.String)">
            <summary>Parses a PASV reply into an instance of the IPEndPoint class.</summary>
            <param name="Reply">The reply to parse into an IPEndPoint.</param>
            <returns>An instance of the IPEndPoint class when successful, null otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.OnPasvConnected(System.IAsyncResult)">
            <summary>Called when we're connected to the data port of the remote FTP server.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Ftp.FtpDataConnection.OnPasvAccept(System.IAsyncResult)">
            <summary>Called when there's a connection from the local FTP client waiting to be accepted.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="F:Coversant.Proxy.Server.Ftp.FtpDataConnection.m_ListenSocket">
            <summary>Holds the value of the ListenSocket property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Ftp.FtpDataConnection.m_Parent">
            <summary>Holds the value of the Parent property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Ftp.FtpDataConnection.m_FtpReply">
            <summary>Holds the value of the FtpReply property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Ftp.FtpDataConnection.m_ExpectsReply">
            <summary>Holds the value of the ExpectsReply property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Ftp.FtpDataConnection.ListenSocket">
            <summary>Gets or sets the Socket that's used to listen for incoming connections.</summary>
            <value>A Socket that's used to listen for incoming connections.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Ftp.FtpDataConnection.Parent">
            <summary>Gets or sets the parent of this FtpDataConnection.</summary>
            <value>The FtpClient object that's the parent of this FtpDataConnection object.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Ftp.FtpDataConnection.FtpReply">
            <summary>Gets or sets a string that stores the reply that has been sent from the remote FTP server.</summary>
            <value>A string that stores the reply that has been sent from the remote FTP server.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Ftp.FtpDataConnection.ExpectsReply">
            <summary>Gets or sets a boolean value that indicates whether the FtpDataConnection expects a reply from the remote FTP server or not.</summary>
            <value>A boolean value that indicates whether the FtpDataConnection expects a reply from the remote FTP server or not.</value>
        </member>
        <member name="T:Coversant.PerformanceCounters.RateOfCountsPerSecond32PerformanceCounter">
            <summary>
            A difference counter that shows the average number of operations completed 
            during each second of the sample interval. Counters of this type measure 
            time in ticks of the system clock. 
            
            Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance 
            counter readings, D 1 and D 0 are their corresponding time readings, and F 
            represents the number of ticks per second. Thus, the numerator represents 
            the number of operations performed during the last sample interval, the 
            denominator represents the number of ticks elapsed during the last sample 
            interval, and F is the frequency of the ticks. The value of F is factored 
            into the equation so that the result can be displayed in seconds.
            </summary>
        </member>
        <member name="M:Coversant.Net.Security.TlsEnumHelper.ToSupportedProtocol(System.Security.Authentication.SslProtocols)">
            <summary>
            Convert from the SslProtocols enumeration value to the supported enumeration value.
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Coversant.Net.Security.TlsEnumHelper.ToSupportedProtocolString(Coversant.Net.Security.SupportedSecureProtocol)">
            <summary>
            Convert the enumeration value to a string
            </summary>
            <param name="theType"></param>
            <returns></returns>
        </member>
        <member name="M:Coversant.Net.Security.TlsEnumHelper.ToSupportedProtocol(System.String)">
            <summary>
            Convert a string to a SupportedSecureProtocol value.
            </summary>
            <remarks>
            Static method.<br/>Any string that cannot be translated is by default mapped to 'None'.
            </remarks>
            <param name="socketTypeString"></param>
            <returns></returns>
        </member>
        <member name="P:Coversant.Chart.ChartValueSeries.Enabled">
            <summary>
            Series is enabled.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next n bits but don't increase input pointer.  n must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to PeekBits followed by dropBits, except for correct error handling.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buf">data to be input</param>
            <param name="off">offset of first byte of input</param>
            <param name="len">length of input</param>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="lit"></param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.freqs">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.length">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.minNumCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.numCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.#ctor(Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteSymbol(System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that at least one frequency is non-zero
            </summary>
            <exception cref="T:Coversant.ICSharpCode.SharpZipLib.SharpZipBaseException">
            No frequencies are non-zero
            </exception>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="stCodes">new codes</param>
            <param name="stLength">length for new codes</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildTree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(Coversant.ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:Coversant.Proxy.Client.IAsyncProxyResult">
            <summary>
            A class that implements the IAsyncResult interface. Objects from this class are returned by the BeginConnect method of the ProxySocket class.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Client.IAsyncProxyResult.Init(System.Object)">
            <summary>Initializes the internal variables of this object</summary>
            <param name="stateObject">An object that contains state information for this request.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.IAsyncProxyResult.Reset">
            <summary>Initializes the internal variables of this object</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.IAsyncProxyResult.m_Completed">
            <summary>Used internally to represent the state of the asynchronous request</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.IAsyncProxyResult.m_StateObject">
            <summary>Holds the value of the StateObject property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.IAsyncProxyResult.m_WaitHandle">
            <summary>Holds the value of the WaitHandle property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Client.IAsyncProxyResult.IsCompleted">
            <summary>Gets a value that indicates whether the server has completed processing the call. It is illegal for the server to use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to "true". Thus, it is safe for the client to destroy the resources after IsCompleted property returns "true".</summary>
            <value>A boolean that indicates whether the server has completed processing the call.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.IAsyncProxyResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the BeginXXXX call has been completed synchronously. If this is detected in the AsyncCallback delegate, it is probable that the thread that called BeginInvoke is the current thread.</summary>
            <value>Returns false.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.IAsyncProxyResult.AsyncState">
            <summary>Gets an object that was passed as the state parameter of the BeginXXXX method call.</summary>
            <value>The object that was passed as the state parameter of the BeginXXXX method call.</value>
        </member>
        <member name="P:Coversant.Proxy.Client.IAsyncProxyResult.AsyncWaitHandle">
             <summary>
             The AsyncWaitHandle property returns the WaitHandle that can use to perform a WaitHandle.WaitOne or WaitAny or WaitAll. The object which implements IAsyncResult need not derive from the System.WaitHandle classes directly. The WaitHandle wraps its underlying synchronization primitive and should be signaled after the call is completed. This enables the client to wait for the call to complete instead polling. The Runtime supplies a number of waitable objects that mirror Win32 synchronization primitives e.g. ManualResetEvent, AutoResetEvent and Mutex.
             WaitHandle supplies methods that support waiting for such synchronization objects to become signaled with "any" or "all" semantics i.e. WaitHandle.WaitOne, WaitAny and WaitAll. Such methods are context aware to avoid deadlocks. The AsyncWaitHandle can be allocated eagerly or on demand. It is the choice of the IAsyncResult implementer.
            </summary>
             <value>The WaitHandle associated with this asynchronous result.</value>
        </member>
        <member name="T:Coversant.Proxy.Server.Http.HttpClient">
            <summary>Relays HTTP data between a remote host and a local client.</summary>
            <remarks>This class supports both HTTP and HTTPS.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.DestroyDelegate)">
            <summary>Initializes a new instance of the HttpClient class.</summary>
            <param name="ClientSocket">The <see cref="T:System.Net.Sockets.Socket">Socket</see> connection between this proxy server and the local client.</param>
            <param name="Destroyer">The callback method to be called when this Client object disconnects from the local client and the remote server.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.StartHandshake">
            <summary>Starts receiving data from the client connection.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.IsValidQuery(System.String)">
            <summary>Checks whether a specified string is a valid HTTP query string.</summary>
            <param name="Query">The query to check.</param>
            <returns>True if the specified string is a valid HTTP query, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.ProcessQuery(System.String)">
            <summary>Processes a specified query and connects to the requested HTTP web server.</summary>
            <param name="Query">A string containing the query to process.</param>
            <remarks>If there's an error while processing the HTTP request or when connecting to the remote server, the Proxy sends a "400 - Bad Request" error to the client.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.ParseQuery(System.String)">
            <summary>Parses a specified HTTP query into its header fields.</summary>
            <param name="Query">The HTTP query string to parse.</param>
            <returns>A StringDictionary object containing all the header fields with their data.</returns>
            <exception cref="T:System.ArgumentNullException">The specified query is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.SendBadRequest">
            <summary>Sends a "400 - Bad Request" error to the client.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.RebuildQuery">
            <summary>Rebuilds the HTTP query, starting from the HttpRequestType, RequestedPath, HttpVersion and HeaderFields properties.</summary>
            <returns>A string representing the rebuilt HTTP query string.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.ToString">
            <summary>Returns text information about this HttpClient object.</summary>
            <returns>A string representing this HttpClient object.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.ToString(System.Boolean)">
            <summary>Returns text information about this HttpClient object.</summary>
            <returns>A string representing this HttpClient object.</returns>
            <param name="WithUrl">Specifies whether or not to include information about the requested URL.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.OnReceiveQuery(System.IAsyncResult)">
            <summary>Called when we received some data from the client connection.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.OnErrorSent(System.IAsyncResult)">
            <summary>Called when the Bad Request error has been sent to the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.OnConnected(System.IAsyncResult)">
            <summary>Called when we're connected to the requested remote host.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.OnQuerySent(System.IAsyncResult)">
            <summary>Called when the HTTP query has been sent to the remote host.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Http.HttpClient.OnOkSent(System.IAsyncResult)">
            <summary>Called when an OK reply has been sent to the local client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="F:Coversant.Proxy.Server.Http.HttpClient.m_HttpQuery">
            <summary>Holds the value of the HttpQuery property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Http.HttpClient.m_RequestedPath">
            <summary>Holds the value of the RequestedPath property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Http.HttpClient.m_HeaderFields">
            <summary>Holds the value of the HeaderFields property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Http.HttpClient.m_HttpVersion">
            <summary>Holds the value of the HttpVersion property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Http.HttpClient.m_HttpRequestType">
            <summary>Holds the value of the HttpRequestType property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Http.HttpClient.m_HttpPost">
            <summary>Holds the POST data</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Http.HttpClient.HeaderFields">
            <summary>Gets or sets a StringDictionary that stores the header fields.</summary>
            <value>A StringDictionary that stores the header fields.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Http.HttpClient.HttpVersion">
            <summary>Gets or sets the HTTP version the client uses.</summary>
            <value>A string representing the requested HTTP version.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Http.HttpClient.HttpRequestType">
            <summary>Gets or sets the HTTP request type.</summary>
            <remarks>
            Usually, this string is set to one of the three following values:
            <list type="bullet">
            <item>GET</item>
            <item>POST</item>
            <item>CONNECT</item>
            </list>
            </remarks>
            <value>A string representing the HTTP request type.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Http.HttpClient.RequestedPath">
            <summary>Gets or sets the requested path.</summary>
            <value>A string representing the requested path.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.Http.HttpClient.HttpQuery">
            <summary>Gets or sets the query string, received from the client.</summary>
            <value>A string representing the HTTP query string.</value>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass">
            <summary>Authenticates a user on a SOCKS5 server according to the username/password authentication subprotocol.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass.#ctor(Coversant.Proxy.Server.Socks.Authentication.AuthenticationList)">
            <summary>Initializes a new instance of the AuthUserPass class.</summary>
            <param name="AuthList">An AuthenticationList object that contains the list of all valid username/password combinations.</param>
            <remarks>If the AuthList parameter is null, any username/password combination will be accepted.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass.StartAuthentication(System.Net.Sockets.Socket,Coversant.Proxy.Server.Socks.Authentication.AuthenticationCompleteDelegate)">
            <summary>Starts the authentication process.</summary>
            <param name="Connection">The connection with the SOCKS client.</param>
            <param name="Callback">The method to call when the authentication is complete.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass.OnRecvRequest(System.IAsyncResult)">
            <summary>Called when we have received the initial authentication data from the SOCKS client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass.IsValidQuery(System.Byte[])">
            <summary>Checks whether the specified authentication query is a valid one.</summary>
            <param name="Query">The query to check.</param>
            <returns>True if the query is a valid authentication query, false otherwise.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass.ProcessQuery(System.Byte[])">
            <summary>Processes an authentication query.</summary>
            <param name="Query">The query to process.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass.OnOkSent(System.IAsyncResult)">
            <summary>Called when an OK reply has been sent to the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass.OnUhohSent(System.IAsyncResult)">
            <summary>Called when a negatiev reply has been sent to the client.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass.m_AuthList">
            <summary>Holds the value of the AuthList property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.Authentication.AuthUserPass.AuthList">
            <summary>Gets or sets the AuthenticationList to use when a computer tries to authenticate on the proxy server.</summary>
            <value>An instance of the AuthenticationList class that contains all the valid username/password combinations.</value>
        </member>
        <member name="M:Coversant.PerformanceCounters.PerformanceCounterManager.#ctor(System.Int32)">
            <summary>
            Manages the PerformanceCounter and PerformanceCounterWriter objects.  Passes PerformanceCounterSamples to PerformanceCounterWriters.
            </summary>
            <param name="maxQueueLength">Maximum CounterSample queue length.</param>
        </member>
        <member name="M:Coversant.Gui.Console.Application.Initialize">
            <summary>
            Setup the Console enviornment.
            </summary>
        </member>
        <member name="M:Coversant.Gui.Console.Application.Iteration">
            <summary>
            Execute a signal iteration, should only be called from the interface thread.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream">
            <summary>
            An output stream that compresses into the BZip2 format 
            including file header chars into another stream.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.ReadByte">
            <summary>
            Read a byte from the stream advancing the position.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of bytes to the stream
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a default output stream with maximum block size
            </summary>
            <param name="stream">The stream to write BZip data onto.</param>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream"></see> 
            for the specified stream, using the given blocksize.
            </summary>
            <param name="stream">The stream to write compressed data to.</param>
            <param name="blockSize">The block size to use.</param>
            <remarks>
            Valid block sizes are in the range 1..9, with 1 giving 
            the lowest compression and 9 the highest.
            </remarks>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Finalize">
            <summary>
            Free any resources and other cleanup before garbage collection reclaims memory
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Close">
            <summary>
            End the current block and end compression.
            Close the stream and free any resources
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flush output buffers
            </summary>		
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets the length in bytes of the stream
            </summary>
        </member>
        <member name="P:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="T:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2">
            <summary>
            Does all the compress and decompress pre-operation stuff.
            Sets up the streams and file header characters.
            Uses multiply overloaded methods to call for the compress/decompress.
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompress <paramref name="instream">input</paramref> writing 
            decompressed data to <paramref name="outstream">output stream</paramref>
            </summary>
        </member>
        <member name="M:Coversant.ICSharpCode.SharpZipLib.BZip2.BZip2.Compress(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Compress <paramref name="instream">input stream</paramref> sending 
            result to <paramref name="outputstream">output stream</paramref>
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.PortMap.PortMapClient">
            <summary>Relays data between a remote host and a local client.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.PortMap.PortMapClient.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.DestroyDelegate,System.Net.IPEndPoint)">
            <summary>Initializes a new instance of the PortMapClient class.</summary>
            <param name="ClientSocket">The <see cref="T:System.Net.Sockets.Socket">Socket</see> connection between this proxy server and the local client.</param>
            <param name="Destroyer">The callback method to be called when this Client object disconnects from the local client and the remote server.</param>
            <param name="MapTo">The IP EndPoint to send the incoming data to.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.PortMap.PortMapClient.StartHandshake">
            <summary>Starts connecting to the remote host.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.PortMap.PortMapClient.OnConnected(System.IAsyncResult)">
            <summary>Called when the socket is connected to the remote host.</summary>
            <remarks>When the socket is connected to the remote host, the PortMapClient begins relaying traffic between the host and the client, until one of them closes the connection.</remarks>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.PortMap.PortMapClient.ToString">
            <summary>Returns text information about this PortMapClient object.</summary>
            <returns>A string representing this PortMapClient object.</returns>
        </member>
        <member name="F:Coversant.Proxy.Server.PortMap.PortMapClient.m_MapTo">
            <summary>Holds the value of the MapTo property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.PortMap.PortMapClient.MapTo">
            <summary>Gets or sets the IP EndPoint to map all incoming traffic to.</summary>
            <value>An IPEndPoint that holds the IP address and port to use when redirecting incoming traffic.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
            <returns>An IP EndPoint specifying the host and port to map all incoming traffic to.</returns>
        </member>
        <member name="T:Coversant.Proxy.Client.Authentication.AuthUserPass">
            <summary>
            This class implements the 'username/password authentication' scheme.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthUserPass.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initializes a new AuthUserPass instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthUserPass.GetAuthenticationBytes">
            <summary>
            Creates an array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.
            </summary>
            <returns>An array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.</returns>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthUserPass.Authenticate">
            <summary>
            Starts the authentication process.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthUserPass.BeginAuthenticate(Coversant.Proxy.Client.HandShakeComplete)">
            <summary>
            Starts the asynchronous authentication process.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthUserPass.OnSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Coversant.Proxy.Client.Authentication.AuthUserPass.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the socket received an authentication reply.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Coversant.Proxy.Client.Authentication.AuthUserPass.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Client.Authentication.AuthUserPass.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Client.Authentication.AuthUserPass.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>The username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Coversant.Proxy.Client.Authentication.AuthUserPass.Password">
            <summary>
            Gets or sets the password to use when authenticating with the proxy server.
            </summary>
            <value>The password to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="T:Coversant.EventArgs`1">
            <summary>
            Generic EventArgs class.  
            </summary>
            <typeparam name="T">Type of the value stored in this event args.</typeparam>
        </member>
        <member name="P:Coversant.EventArgs`1.Value">
            <summary>
            Generic Value Property
            </summary>
        </member>
        <member name="T:Coversant.Forms.Controls.ExtendedRichTextBox">
            <summary>
            This class adds the following functionality to RichTextBox:
            
            1.	Allows plain text to be inserted or appended programmatically to RTF
            	content.
            2.	Allows the font, text color, and highlight color of plain text to be
            	specified when inserting or appending text as RTF.
            3.	Allows images to be inserted programmatically, or with interaction from
            	the user.
            </summary>
            <remarks>
            Many solutions to the problem of programmatically inserting images
            into a RichTextBox use the clipboard or hard code the RTF for
            the image in the program.  This class is an attempt to make the process of
            inserting images at runtime more flexible without the overhead of maintaining
            the clipboard or the use of huge, cumbersome strings.
            
            RTF Specification v1.6 was used and is referred to many times in this document.
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnrtfspec/html/rtfspec.asp
            
            For information about the RichEdit (Unmanaged RichTextBox) ...
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/commctls/richedit/richeditcontrols/aboutricheditcontrols.asp
            </remarks>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.#ctor">
            <summary>
            Initializes the text colors, creates dictionaries for RTF colors and
            font families, and stores the horizontal and vertical resolution of
            the RichTextBox's graphics context.
            </summary>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.#ctor(Coversant.Forms.Controls.RtfColor)">
            <summary>
            Calls the default constructor then sets the text color.
            </summary>
            <param name="_textColor"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.#ctor(Coversant.Forms.Controls.RtfColor,Coversant.Forms.Controls.RtfColor)">
            <summary>
            Calls the default constructor then sets te text and highlight colors.
            </summary>
            <param name="_textColor"></param>
            <param name="_highlightColor"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.AppendRtf(System.String)">
            <summary>
            Assumes the string passed as a paramter is valid RTF text and attempts
            to append it as RTF to the content of the control.
            </summary>
            <param name="_rtf"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.InsertRtf(System.String)">
            <summary>
            Assumes that the string passed as a parameter is valid RTF text and
            attempts to insert it as RTF into the content of the control.
            </summary>
            <remarks>
            NOTE: The text is inserted wherever the caret is at the time of the call,
            and if any text is selected, that text is replaced.
            </remarks>
            <param name="_rtf"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.AppendTextAsRtf(System.String)">
            <summary>
            Appends the text using the current font, text, and highlight colors.
            </summary>
            <param name="_text"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.AppendTextAsRtf(System.String,System.Drawing.Font)">
            <summary>
            Appends the text using the given font, and current text and highlight
            colors.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.AppendTextAsRtf(System.String,System.Drawing.Font,Coversant.Forms.Controls.RtfColor)">
            <summary>
            Appends the text using the given font and text color, and the current
            highlight color.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_color"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.AppendTextAsRtf(System.String,System.Drawing.Font,Coversant.Forms.Controls.RtfColor,Coversant.Forms.Controls.RtfColor)">
            <summary>
            Appends the text using the given font, text, and highlight colors.  Simply
            moves the caret to the end of the RichTextBox's text and makes a call to
            insert.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_textColor"></param>
            <param name="_backColor"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.InsertTextAsRtf(System.String)">
            <summary>
            Inserts the text using the current font, text, and highlight colors.
            </summary>
            <param name="_text"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.InsertTextAsRtf(System.String,System.Drawing.Font)">
            <summary>
            Inserts the text using the given font, and current text and highlight
            colors.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.InsertTextAsRtf(System.String,System.Drawing.Font,Coversant.Forms.Controls.RtfColor)">
            <summary>
            Inserts the text using the given font and text color, and the current
            highlight color.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_color"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.InsertTextAsRtf(System.String,System.Drawing.Font,Coversant.Forms.Controls.RtfColor,Coversant.Forms.Controls.RtfColor)">
            <summary>
            Inserts the text using the given font, text, and highlight colors.  The
            text is wrapped in RTF codes so that the specified formatting is kept.
            You can only assign valid RTF to the RichTextBox.Rtf property, else
            an exception is thrown.  The RTF string should follow this format ...
            
            {\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{[FONTS]}{\colortbl ;[COLORS]}}
            \viewkind4\uc1\pard\cf1\f0\fs20 [DOCUMENT AREA] }
            
            </summary>
            <remarks>
            NOTE: The text is inserted wherever the caret is at the time of the call,
            and if any text is selected, that text is replaced.
            </remarks>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_color"></param>
            <param name="_color"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.GetDocumentArea(System.String,System.Drawing.Font)">
             <summary>
             Creates the Document Area of the RTF being inserted. The document area
             (in this case) consists of the text being added as RTF and all the
             formatting specified in the Font object passed in. This should have the
             form ...
             
             \viewkind4\uc1\pard\cf1\f0\fs20 [DOCUMENT AREA] }
            
             </summary>
             <param name="_text"></param>
             <param name="_font"></param>
             <returns>
             The document area as a string.
             </returns>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.InsertImage(System.Drawing.Image)">
            <summary>
            Inserts an image into the RichTextBox.  The image is wrapped in a Windows
            Format Metafile, because although Microsoft discourages the use of a WMF,
            the RichTextBox (and even MS Word), wraps an image in a WMF before inserting
            the image into a document.  The WMF is attached in HEX format (a string of
            HEX numbers).
            
            The RTF Specification v1.6 says that you should be able to insert bitmaps,
            .jpegs, .gifs, .pngs, and Enhanced Metafiles (.emf) directly into an RTF
            document without the WMF wrapper. This works fine with MS Word,
            however, when you don't wrap images in a WMF, WordPad and
            RichTextBoxes simply ignore them.  Both use the riched20.dll or msfted.dll.
            </summary>
            <remarks>
            NOTE: The image is inserted wherever the caret is at the time of the call,
            and if any text is selected, that text is replaced.
            </remarks>
            <param name="_image"></param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.GetImagePrefix(System.Drawing.Image)">
            <summary>
            Creates the RTF control string that describes the image being inserted.
            This description (in this case) specifies that the image is an
            MM_ANISOTROPIC metafile, meaning that both X and Y axes can be scaled
            independently.  The control string also gives the images current dimensions,
            and its target dimensions, so if you want to control the size of the
            image being inserted, this would be the place to do it. The prefix should
            have the form ...
            
            {\pict\wmetafile8\picw[A]\pich[B]\picwgoal[C]\pichgoal[D]
            
            where ...
            
            A	= current width of the metafile in hundredths of millimeters (0.01mm)
            	= Image Width in Inches * Number of (0.01mm) per inch
            	= (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 2540
            	= (Image Width in Pixels / Graphics.DpiX) * 2540
            
            B	= current height of the metafile in hundredths of millimeters (0.01mm)
            	= Image Height in Inches * Number of (0.01mm) per inch
            	= (Image Height in Pixels / Graphics Context's Vertical Resolution) * 2540
            	= (Image Height in Pixels / Graphics.DpiX) * 2540
            
            C	= target width of the metafile in twips
            	= Image Width in Inches * Number of twips per inch
            	= (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 1440
            	= (Image Width in Pixels / Graphics.DpiX) * 1440
            
            D	= target height of the metafile in twips
            	= Image Height in Inches * Number of twips per inch
            	= (Image Height in Pixels / Graphics Context's Horizontal Resolution) * 1440
            	= (Image Height in Pixels / Graphics.DpiX) * 1440
            
            </summary>
            <remarks>
            The Graphics Context's resolution is simply the current resolution at which
            windows is being displayed.  Normally it's 96 dpi, but instead of assuming
            I just added the code.
            
            According to Ken Howe at pbdr.com, "Twips are screen-independent units
            used to ensure that the placement and proportion of screen elements in
            your screen application are the same on all display systems."
            
            Units Used
            ----------
            1 Twip = 1/20 Point
            1 Point = 1/72 Inch
            1 Twip = 1/1440 Inch
            
            1 Inch = 2.54 cm
            1 Inch = 25.4 mm
            1 Inch = 2540 (0.01)mm
            </remarks>
            <param name="_image"></param>
            <returns></returns>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.GdipEmfToWmfBits(System.IntPtr,System.UInt32,System.Byte[],System.Int32,Coversant.Forms.Controls.ExtendedRichTextBox.EmfToWmfBitsFlags)">
            <summary>
            Use the EmfToWmfBits function in the GDI+ specification to convert a 
            Enhanced Metafile to a Windows Metafile
            </summary>
            <param name="_hEmf">
            A handle to the Enhanced Metafile to be converted
            </param>
            <param name="_bufferSize">
            The size of the buffer used to store the Windows Metafile bits returned
            </param>
            <param name="_buffer">
            An array of bytes used to hold the Windows Metafile bits returned
            </param>
            <param name="_mappingMode">
            The mapping mode of the image.  This control uses MM_ANISOTROPIC.
            </param>
            <param name="_flags">
            Flags used to specify the format of the Windows Metafile returned
            </param>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.GetRtfImage(System.Drawing.Image)">
            <summary>
            Wraps the image in an Enhanced Metafile by drawing the image onto the
            graphics context, then converts the Enhanced Metafile to a Windows
            Metafile, and finally appends the bits of the Windows Metafile in HEX
            to a string and returns the string.
            </summary>
            <param name="_image"></param>
            <returns>
            A string containing the bits of a Windows Metafile in HEX
            </returns>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.GetFontTable(System.Drawing.Font)">
            <summary>
            Creates a font table from a font object.  When an Insert or Append 
            operation is performed a font is either specified or the default font
            is used.  In any case, on any Insert or Append, only one font is used,
            thus the font table will always contain a single font.  The font table
            should have the form ...
            
            {\fonttbl{\f0\[FAMILY]\fcharset0 [FONT_NAME];}
            </summary>
            <param name="_font"></param>
            <returns></returns>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.GetColorTable(Coversant.Forms.Controls.RtfColor,Coversant.Forms.Controls.RtfColor)">
            <summary>
            Creates a font table from the RtfColor structure.  When an Insert or Append
            operation is performed, _textColor and _backColor are either specified
            or the default is used.  In any case, on any Insert or Append, only three
            colors are used.  The default color of the RichTextBox (signified by a
            semicolon (;) without a definition), is always the first color (index 0) in
            the color table.  The second color is always the text color, and the third
            is always the highlight color (color behind the text).  The color table
            should have the form ...
            
            {\colortbl ;[TEXT_COLOR];[HIGHLIGHT_COLOR];}
            
            </summary>
            <param name="_textColor"></param>
            <param name="_backColor"></param>
            <returns></returns>
        </member>
        <member name="M:Coversant.Forms.Controls.ExtendedRichTextBox.RemoveBadChars(System.String)">
            <summary>
            Called by overrided RichTextBox.Rtf accessor.
            Removes the null character from the RTF.  This is residue from developing
            the control for a specific instant messaging protocol and can be ommitted.
            </summary>
            <param name="_originalRtf"></param>
            <returns>RTF without null character</returns>
        </member>
        <member name="M:Coversant.Chart.ChartValue.#ctor(System.IComparable,System.IComparable)">
            <summary>
            Chart Value
            </summary>
            <param name="x">X Axis Value</param>
            <param name="y">Y Axis Value</param>
        </member>
        <member name="P:Coversant.Chart.ChartValue.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="P:Coversant.Chart.ChartValue.X">
            <summary>
            X Axis Value
            </summary>
        </member>
        <member name="P:Coversant.Chart.ChartValue.Y">
            <summary>
            Y Axis Value
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksClient">
            <summary>
            Summary description for XMPPBytestreamsSocksClient.
            </summary>
        </member>
        <member name="F:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksClient._connectReceived">
            <summary>
            Holds the ConnectReceivedDelegate to be used when a CONNECT request is processed.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksClient.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.DestroyDelegate,Coversant.Proxy.Server.Socks.Authentication.AuthenticationList,Coversant.Proxy.Server.Socks.ConnectReceivedDelegate,System.Byte[],System.Byte[])">
            <summary>Initializes a new instance of the SocksClient class.</summary>
            <param name="clientSocket">The Socket connection between this proxy server and the local client.</param>
            <param name="destroyer">The method to be called when this SocksClient object disconnects from the local client and the remote server.</param>
            <param name="authList">The list with valid username/password combinations.</param>
            <param name="connectReceived">The method to be called with this SocksClient receives and processes a CONNECT command.</param>
            <param name="buffer">The buffer to use for receiving data from the client.</param>
            <param name="remoteBuffer">The buffer to use for receiving data from the remote endpoint.</param>
            <remarks>If the AuthList is non-null, every client has to authenticate before he can use this proxy server to relay data. If it is null, the clients don't have to authenticate.</remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksClient.CompleteConnection(System.Boolean,Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksClient)">
            <summary>
            
            </summary>
            <param name="success"></param>
            <param name="target"></param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksClient.OnEndSocksProtocol(System.Boolean,System.Net.Sockets.Socket)">
            <summary>
            
            </summary>
            <param name="Success"></param>
            <param name="Remote"></param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksClient.OnStartSocksProtocol(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="ar"></param>
        </member>
        <member name="P:Coversant.Proxy.Server.Socks.XMPPBytestreamsSocksClient.ConnectReceived">
            <summary>
            
            </summary>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.Socks4Handler">
            <summary>Implements the SOCKS4 and SOCKS4a protocols.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks4Handler.#ctor(System.Net.Sockets.Socket,Coversant.Proxy.Server.Socks.NegotiationCompleteDelegate)">
            <summary>Initializes a new instance of the Socks4Handler class.</summary>
            <param name="ClientConnection">The connection with the client.</param>
            <param name="Callback">The method to call when the SOCKS negotiation is complete.</param>
            <exception cref="T:System.ArgumentNullException"><c>Callback</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks4Handler.IsValidRequest(System.Byte[])">
            <summary>Checks whether a specific request is a valid SOCKS request or not.</summary>
            <param name="Request">The request array to check.</param>
            <returns>True is the specified request is valid, false otherwise</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks4Handler.ProcessRequest(System.Byte[])">
            <summary>Processes a SOCKS request from a client.</summary>
            <param name="Request">The request to process.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks4Handler.OnConnected(System.IAsyncResult)">
            <summary>Called when we're successfully connected to the remote host.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks4Handler.Dispose(System.Byte)">
            <summary>Sends a reply to the client connection and disposes it afterwards.</summary>
            <param name="Value">A byte that contains the reply code to send to the client.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Socks4Handler.OnAccept(System.IAsyncResult)">
            <summary>Called when there's an incoming connection in the AcceptSocket queue.</summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="T:Coversant.Proxy.Server.ProxyConfig">
            <summary>
            Stores the configuration settings of this proxy server.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.#ctor(Coversant.Proxy.Server.Proxy,System.String)">
            <summary>
            Initializes a new ProxyConfig instance.
            </summary>
            <param name="parent">The parent of this ProxyCondif instance.</param>
            <param name="file">The XML file to read data from and store data to.</param>
            <exception cref="T:System.ArgumentNullException"><c>file</c> is null -or- <c>parent</c> is null.</exception>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.ReadString(System.String)">
            <summary>
            Reads a string from the settings section.
            </summary>
            <param name="name">The key to read from.</param>
            <returns>The string value that corresponds with the specified key, or an empty string if the specified key was not found in the collection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.ReadString(System.String,System.String)">
            <summary>
            Reads a string from the settings section.
            </summary>
            <param name="name">The key to read from.</param>
            <param name="def">The default string to return.</param>
            <returns>The string value that corresponds with the specified key, or <c>def</c> if the specified key was not found in the collection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.ReadBytes(System.String)">
            <summary>
            Reads a byte array from the settings section.
            </summary>
            <param name="name">The key to read from.</param>
            <returns>The array of bytes that corresponds with the specified key, or <c>null</c> if the specified key was not found in the collection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.ReadInt(System.String)">
            <summary>
            Reads an integer from the settings section.
            </summary>
            <param name="name">The key to read from.</param>
            <returns>The integer that corresponds with the specified key, or 0 if the specified key was not found in the collection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.ReadInt(System.String,System.Int32)">
            <summary>
            Reads an integer from the settings section.
            </summary>
            <param name="name">The key to read from.</param>
            <param name="def">The default integer to return.</param>
            <returns>The integer that corresponds with the specified key, or <c>def</c> if the specified key was not found in the collection.</returns>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveSetting(System.String,System.String)">
            <summary>
            Saves a string to the settings section.
            </summary>
            <param name="name">The key of the setting.</param>
            <param name="data">The string data of the setting.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveSetting(System.String,System.String,System.Boolean)">
            <summary>
            Saves a string to the settings section.
            </summary>
            <param name="name">The key of the setting.</param>
            <param name="data">The string data of the setting.</param>
            <param name="saveData">True if the data has to be written to the XML file, false otherwise.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveSetting(System.String,System.Int32)">
            <summary>
            Saves an integer to the settings section.
            </summary>
            <param name="name">The key of the setting.</param>
            <param name="data">The integer data of the setting.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveSetting(System.String,System.Int32,System.Boolean)">
            <summary>
            Saves an integer to the settings section.
            </summary>
            <param name="name">The key of the setting.</param>
            <param name="data">The integer data of the setting.</param>
            <param name="saveData">True if the data has to be written to the XML file, false otherwise.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveSetting(System.String,System.Byte[])">
            <summary>
            Saves an array of bytes to the settings section.
            </summary>
            <param name="name">The key of the setting.</param>
            <param name="data">The byte data of the setting.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveSetting(System.String,System.Byte[],System.Boolean)">
            <summary>
            Saves an array of bytes to the settings section.
            </summary>
            <param name="name">The key of the setting.</param>
            <param name="data">The byte data of the setting.</param>
            <param name="saveData">True if the data has to be written to the XML file, false otherwise.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveUserPass(System.String,System.String)">
            <summary>
            Saves a username and password combination to the authentication list.
            </summary>
            <param name="username">The username to add.</param>
            <param name="password">The password to add.</param>
            <exception cref="T:System.ArgumentNullException"><c>username</c> is null -or- <c>password</c> is null.</exception>
            <exception cref="T:System.ArgumentException">The specified username is invalid.</exception>
            <remarks><p>If the user already exists in the collection, the old password will be changed to the new one.</p><p>The username 'users' is invalid because it is used internally to store the usernames.</p></remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveUserPass(System.String,System.String,System.Boolean)">
            <summary>
            Saves a username and password combination to the authentication list.
            </summary>
            <param name="username">The username to add.</param>
            <param name="password">The password to add.</param>
            <param name="saveData">True if the data has to be written to the XML file, false otherwise.</param>
            <exception cref="T:System.ArgumentNullException"><c>username</c> is null -or- <c>password</c> is null.</exception>
            <exception cref="T:System.ArgumentException">The specified username is invalid.</exception>
            <remarks><p>If the user already exists in the collection, the old password will be changed to the new one.</p><p>The username 'users' is invalid because it is used internally to store the usernames.</p><p>The password will be hashed before it is stored in the authentication list.</p></remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveUserHash(System.String,System.String)">
            <summary>
            Saves a username and password hash combination to the authentication list.
            </summary>
            <param name="username">The username to add.</param>
            <param name="passHash">The password hash to add.</param>
            <exception cref="T:System.ArgumentNullException"><c>username</c> is null -or- <c>passHash</c> is null.</exception>
            <exception cref="T:System.ArgumentException">The specified username is invalid.</exception>
            <remarks><p>If the user already exists in the collection, the old password hash will be changed to the new one.</p><p>The username 'users' is invalid because it is used internally to store the usernames.</p><p>The password will <em>not</em> be hashed before it is stored in the authentication list. The user must make sure it is a valid MD5 hash.</p></remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveUserHash(System.String,System.String,System.Boolean)">
            <summary>
            Saves a username and password hash combination to the authentication list.
            </summary>
            <param name="username">The username to add.</param>
            <param name="passHash">The password hash to add.</param>
            <param name="saveData">True if the data has to be written to the XML file, false otherwise.</param>
            <exception cref="T:System.ArgumentNullException"><c>username</c> is null -or- <c>passHash</c> is null.</exception>
            <exception cref="T:System.ArgumentException">The specified username is invalid.</exception>
            <remarks><p>If the user already exists in the collection, the old password hash will be changed to the new one.</p><p>The username 'users' is invalid because it is used internally to store the usernames.</p><p>The password will <em>not</em> be hashed before it is stored in the authentication list. The user must make sure it is a valid MD5 hash.</p></remarks>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.RemoveUser(System.String)">
            <summary>
            Removes a user from the authentication list.
            </summary>
            <param name="user">The user to remove.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.RemoveUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the authentication list.
            </summary>
            <param name="user">The user to remove.</param>
            <param name="save">True if the data has to be written to the XML file, false otherwise.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveData">
            <summary>
            Saves the data in this class to an XML file.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveSettings(System.Xml.XmlTextWriter)">
            <summary>
            Saves the settings in this class to an XML writer.
            </summary>
            <param name="writer">The XML writer to save the data to.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveUsers(System.Xml.XmlTextWriter)">
            <summary>
            Saves the authentication list to an XML writer.
            </summary>
            <param name="writer">The XML writer to save the users to.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.SaveListeners(System.Xml.XmlTextWriter)">
            <summary>
            Saves the listeners to an XML writer.
            </summary>
            <param name="writer">The XML writer to save the users to.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.LoadData">
            <summary>
            Loads the data from an XML file.
            </summary>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.LoadSettings(System.Xml.XmlTextReader)">
            <summary>
            Loads the settings from an XML file.
            </summary>
            <param name="reader">The XML reader to read the settings from.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.LoadUsers(System.Xml.XmlTextReader)">
            <summary>
            Loads the userlist from an XML file.
            </summary>
            <param name="reader">The XML reader to read the users from.</param>
        </member>
        <member name="M:Coversant.Proxy.Server.ProxyConfig.LoadListeners(System.Xml.XmlTextReader)">
            <summary>
            Loads the listeners list from an XML file.
            </summary>
            <param name="reader">The XML reader to read the users from.</param>
        </member>
        <member name="F:Coversant.Proxy.Server.ProxyConfig.m_File">
            <summary>Holds the value of the File property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.ProxyConfig.m_Settings">
            <summary>Holds the value of the Settings property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.ProxyConfig.m_UserList">
            <summary>Holds the value of the UserList property.</summary>
        </member>
        <member name="F:Coversant.Proxy.Server.ProxyConfig.m_Parent">
            <summary>Holds the value of the Parent property.</summary>
        </member>
        <member name="P:Coversant.Proxy.Server.ProxyConfig.File">
            <summary>
            Gets the full path to the XML data file.
            </summary>
            <value>A String that holds the full path to the XML data file.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.ProxyConfig.Parent">
            <summary>
            Gets the parent object of this ProxyConfig class.
            </summary>
            <value>An instance of the Proxy class.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.ProxyConfig.Settings">
            <summary>
            Gets the dictionary that holds the settings.
            </summary>
            <value>An instance of the StringDictionary class that holds the settings.</value>
        </member>
        <member name="P:Coversant.Proxy.Server.ProxyConfig.UserList">
            <summary>
            Gets the userlist.
            </summary>
            <value>An instance of the AuthenticationList class that holds all the users and their corresponding password hashes.</value>
        </member>
        <member name="T:Coversant.Proxy.Server.Socks.Authentication.AuthNone">
            <summary>Authenticates a user on a SOCKS5 server according to the 'No Authentication' subprotocol.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthNone.#ctor">
            <summary>Initializes a new instance of the AuthNone class.</summary>
        </member>
        <member name="M:Coversant.Proxy.Server.Socks.Authentication.AuthNone.StartAuthentication(System.Net.Sockets.Socket,Coversant.Proxy.Server.Socks.Authentication.AuthenticationCompleteDelegate)">
            <summary>Calls the parent class to inform it authentication is complete.</summary>
            <param name="Connection">The connection with the SOCKS client.</param>
            <param name="Callback">The method to call when the authentication is complete.</param>
        </member>
    </members>
</doc>
